
#line 3 "thriftl.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types.
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t;
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)

/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

#define YY_FLEX_LEX_COMPAT
extern int yylineno;

int yylineno = 1;

extern char yytext[];

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	if ( yyleng + (yy_more_offset) >= YYLMAX ) \
		YY_FATAL_ERROR( "token too large, exceeds YYLMAX" ); \
	yy_flex_strncpy( &yytext[(yy_more_offset)], (yytext_ptr), yyleng + 1 ); \
	yyleng += (yy_more_offset); \
	(yy_prev_more_offset) = (yy_more_offset); \
	(yy_more_offset) = 0; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 144
#define YY_END_OF_BUFFER 145
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[1511] =
    {   0,
        1,  137,    1,  137,  145,  143,  144,    1,  143,  144,
        1,  144,  143,  144,    5,  143,  144,  143,  144,    8,
      143,  144,  137,  143,  144,  137,  139,  143,  144,  143,
      144,  143,  144,  135,  137,  143,  144,  135,  137,  143,
      144,  138,  139,  143,  144,  138,  139,  143,  144,  138,
      139,  143,  144,  138,  139,  143,  144,  138,  139,  143,
      144,  138,  139,  143,  144,  138,  143,  144,  138,  139,
      143,  144,  138,  139,  143,  144,  138,  139,  143,  144,
      138,  139,  143,  144,  138,  139,  143,  144,  138,  139,
      143,  144,  138,  139,  143,  144,  138,  139,  143,  144,

      138,  139,  143,  144,  138,  139,  143,  144,  138,  139,
      143,  144,  138,  139,  143,  144,  138,  139,  143,  144,
      138,  139,  143,  144,  138,  139,  143,  144,  138,  139,
      143,  144,  138,  139,  143,  144,  138,  139,  143,  144,
      138,  139,  143,  144,  138,  139,  143,  144,  138,  139,
      143,  144,  138,  139,  143,  144,  138,  139,  143,  144,
        6,    8,  143,  144,    7,    8,  143,  144,    1,  140,
        5,  141,  137,  135,  137,  139,  139,  137,  139,  135,
      137,  139,  139,  137,    4,  134,  137,  135,  137,  138,
      139,  138,  139,  139,  137,  138,  139,  138,  139,  138,

      139,  138,  139,  138,  138,  139,  138,  139,  138,  139,
       61,  138,  139,  138,  139,  138,  139,  138,  139,  138,
      139,  138,  139,  138,  139,  138,  139,  138,  139,  138,
      139,  138,  139,  138,  139,  138,  139,   74,  138,  139,
      138,  139,  138,  139,  138,  139,  138,  139,  138,  139,
      138,  139,  138,  139,  138,  139,  138,  139,  138,  139,
      138,  139,  138,  139,  138,  139,  138,  139,   88,  138,
      139,  138,  139,   91,  138,  139,   96,  138,  139,  138,
      139,  138,  139,  138,  139,  138,  139,  138,  139,  138,
      139,  138,  139,  138,  139,  138,  139,  138,  139,  102,

      138,  139,  138,  139,  138,  139,  138,  139,  138,  139,
      138,  139,  138,  139,  138,  139,  138,  139,  138,  139,
      138,  139,  138,  139,  138,  139,  138,  139,  138,  139,
      138,  139,  138,  139,  138,  139,  138,  139,  138,  139,
      138,  139,  138,  139,  138,  139,  138,  139,  138,  139,
      138,  139,  138,  139,  138,  139,  138,  139,  138,  139,
      137,  137,  139,  135,  137,  139,  137,  139,    4,  136,
      138,  139,  138,  139,  138,  139,  138,  139,  138,  139,
       59,  138,  139,  138,  139,  138,  139,  138,  139,  138,
      139,  138,  139,  138,  139,  138,  139,  138,  139,  138,

      139,  138,  139,  138,  139,  138,  139,  138,  139,  138,
      139,  138,  139,  138,  139,   70,  138,  139,   72,  138,
      139,  138,  139,  138,  139,  138,  139,  138,  139,  138,
      139,  138,  139,  138,  139,  138,  139,  138,  139,  138,
      139,   83,  138,  139,  138,  139,  138,  139,  138,  139,
      138,  139,   31,  138,  139,   32,  138,  139,   33,  138,
      139,  138,  139,  138,  139,  138,  139,  138,  139,   92,
      138,  139,  138,  139,  138,  139,  138,  139,  138,  139,
       40,  138,  139,  138,  139,  138,  139,  100,  138,  139,
      101,  138,  139,  138,  139,  138,  139,  138,  139,  138,

      139,  138,  139,  138,  139,  138,  139,  138,  139,  138,
      139,  138,  139,  138,  139,  138,  139,  138,  139,  138,
      139,  138,  139,  138,  139,   43,  138,  139,  138,  139,
      138,  139,  138,  139,  138,  139,  138,  139,  138,  139,
      138,  139,  138,  139,  138,  139,  138,  139,  138,  139,
      138,  139,  138,  139,  138,  139,  122,  138,  139,  138,
      139,  138,  139,  138,  139,  124,  138,  139,  138,  139,
      138,  139,  138,  139,  138,  139,  138,  139,  138,  139,
      138,  139,  138,  139,    2,  138,  139,  138,  139,  138,
      139,  138,  139,  138,  139,   60,  138,  139,  138,  139,

      138,  139,   63,  138,  139,  138,  139,   29,  138,  139,
      138,  139,   30,  138,  139,   65,  138,  139,   66,  138,
      139,  138,  139,  138,  139,  138,  139,  138,  139,  138,
      139,  138,  139,  138,  139,  138,  139,  138,  139,  138,
      139,   75,  138,  139,   76,  138,  139,   53,  138,  139,
      138,  139,   79,  138,  139,  138,  139,  138,  139,  138,
      139,  138,  139,  138,  139,  138,  139,  138,  139,   87,
      138,  139,  138,  139,  138,  139,  138,  139,  138,  139,
      138,  139,  138,  139,  138,  139,  138,  139,  138,  139,
       42,  138,  139,   98,  138,  139,  138,  139,  138,  139,

      138,  139,  138,  139,  103,  138,  139,  138,  139,  138,
      139,  138,  139,  138,  139,  138,  139,  138,  139,  138,
      139,  138,  139,  138,  139,  138,  139,  138,  139,  138,
      139,  138,  139,  138,  139,  138,  139,  138,  139,  138,
      139,  138,  139,  138,  139,  138,  139,  138,  139,  138,
      139,  138,  139,  138,  139,  138,  139,  118,  138,  139,
      138,  139,  138,  139,  121,  138,  139,  138,  139,  138,
      139,  138,  139,   48,  138,  139,  138,  139,   28,  138,
      139,  138,  139,  138,  139,  128,  138,  139,  138,  139,
      138,  139,    3,    2,  142,  138,  139,  132,  138,  139,

      138,  139,  138,  139,  138,  139,  138,  139,   57,  138,
      139,  138,  139,   64,  138,  139,   67,  138,  139,  138,
      139,   54,  138,  139,  138,  139,  138,  139,  138,  139,
      138,  139,  138,  139,  138,  139,  138,  139,  138,  139,
      138,  139,  138,  139,  138,  139,  138,  139,  138,  139,
       81,  138,  139,  138,  139,   35,  138,  139,  138,  139,
      138,  139,  138,  139,  138,  139,  138,  139,  138,  139,
      138,  139,  138,  139,  138,  139,  138,  139,  138,  139,
      138,  139,  138,  139,  138,  139,  138,  139,  138,  139,
      138,  139,  138,  139,  105,  138,  139,  138,  139,  138,

      139,  138,  139,  138,  139,  108,  138,  139,  138,  139,
      138,  139,  138,  139,  138,  139,   39,  138,  139,  138,
      139,  111,  138,  139,  138,  139,  138,  139,   38,  138,
      139,  138,  139,  138,  139,  138,  139,  138,  139,  138,
      139,  138,  139,  138,  139,  119,  138,  139,  138,  139,
      138,  139,   47,  138,  139,  138,  139,  138,  139,  138,
      139,  127,  138,  139,  138,  139,  138,  139,  138,  139,
      129,  138,  139,    3,  142,    2,  142,  131,  138,  139,
      130,  138,  139,  138,  139,  138,  139,   62,  138,  139,
       37,  138,  139,  138,  139,  138,  139,  138,  139,  138,

      139,  138,  139,  138,  139,  138,  139,  138,  139,   73,
      138,  139,   34,  138,  139,   77,  138,  139,   78,  138,
      139,  138,  139,   80,  138,  139,  138,  139,  138,  139,
      138,  139,   86,  138,  139,  138,  139,  138,  139,   90,
      138,  139,  138,  139,   93,  138,  139,  138,  139,  138,
      139,  138,  139,   97,  138,  139,  138,  139,   99,  138,
      139,   44,  138,  139,  138,  139,  138,  139,  138,  139,
      138,  139,  138,  139,  104,  138,  139,  138,  139,  138,
      139,  138,  139,  110,  138,  139,  138,  139,  138,  139,
      112,  138,  139,  113,  138,  139,  138,  139,  114,  138,

      139,   36,  138,  139,   46,  138,  139,  115,  138,  139,
      138,  139,  138,  139,   51,  138,  139,  138,  139,  138,
      139,  138,  139,  138,  139,  138,  139,  138,  139,  138,
      139,  138,  139,  138,  139,  138,  139,  142,  138,  139,
      138,  139,  138,  139,  138,  139,  138,  139,  138,  139,
      138,  139,  138,  139,   69,  138,  139,   71,  138,  139,
      138,  139,   50,  138,  139,   82,  138,  139,   84,  138,
      139,  138,  139,  138,  139,  138,  139,   27,  138,  139,
      138,  139,  138,  139,  138,  139,  138,  139,  138,  139,
      138,  139,  138,  139,  106,  138,  139,  138,  139,  138,

      139,  138,  139,  138,  139,  138,  139,   52,  138,  139,
      138,  139,  138,  139,  138,  139,  138,  139,   45,  138,
      139,  138,  139,  125,  138,  139,  138,  139,   22,  138,
      139,  138,  139,  138,  139,  138,  139,  138,  139,  138,
      139,   58,  138,  139,  138,  139,   68,  138,  139,  138,
      139,  138,  139,   12,  138,  139,  138,  139,  138,  139,
       85,  138,  139,   41,  138,  139,  138,  139,  138,  139,
      138,  139,  138,  139,  138,  139,   56,  138,  139,  138,
      139,  138,  139,  138,  139,  138,  139,  109,  138,  139,
       55,  138,  139,  138,  139,  138,  139,  138,  139,  117,

      138,  139,  138,  139,  123,  138,  139,  126,  138,  139,
      138,  139,  138,  139,  138,  139,  138,  139,  133,  138,
      139,  138,  139,  138,  139,  138,  139,  138,  139,   49,
      138,  139,  138,  139,  138,  139,   95,  138,  139,  138,
      139,    9,  138,  139,  138,  139,  138,  139,  107,  138,
      139,   17,  138,  139,  138,  139,  138,  139,  138,  139,
      120,  138,  139,   26,  138,  139,  138,  139,  138,  139,
      138,  139,  138,  139,  138,  139,  138,  139,  138,  139,
       89,  138,  139,   94,  138,  139,  138,  139,  138,  139,
      138,  139,  138,  139,  138,  139,  138,  139,  138,  139,

      138,  139,  138,  139,  138,  139,   11,  138,  139,  138,
      139,  138,  139,  138,  139,  138,  139,  138,  139,  138,
      139,  138,  139,  138,  139,  138,  139,  138,  139,  138,
      139,  138,  139,   14,  138,  139,  138,  139,  138,  139,
       13,  138,  139,   18,  138,  139,  138,  139,  138,  139,
      138,  139,  138,  139,  116,  138,  139,  138,  139,   24,
      138,  139,   23,  138,  139,   10,  138,  139,  138,  139,
       16,  138,  139,  138,  139,  138,  139,  138,  139,   25,
      138,  139,  138,  139,   19,  138,  139,  138,  139,  138,
      139,  138,  139,  138,  139,  138,  139,   15,  138,  139,

      138,  139,   21,  138,  139,  138,  139,   20,  138,  139
    } ;

static yyconst flex_int16_t yy_accept[691] =
    {   0,
        1,    3,    5,    6,    8,   11,   13,   15,   18,   20,
       23,   26,   30,   32,   34,   38,   42,   46,   50,   54,
       58,   62,   66,   69,   73,   77,   81,   85,   89,   93,
       97,  101,  105,  109,  113,  117,  121,  125,  129,  133,
      137,  141,  145,  149,  153,  157,  161,  165,  169,  170,
      170,  171,  172,  172,  173,  173,  174,  176,  176,  177,
      178,  180,  183,  184,  185,  185,  186,  188,  188,  190,
      192,  194,  194,  195,  198,  200,  202,  204,  205,  207,
      209,  211,  214,  216,  218,  220,  222,  224,  226,  228,
      230,  232,  234,  236,  238,  241,  243,  245,  247,  249,

      251,  253,  255,  257,  259,  261,  263,  265,  267,  269,
      272,  274,  277,  280,  282,  284,  286,  288,  290,  292,
      294,  296,  298,  300,  303,  305,  307,  309,  311,  313,
      315,  317,  319,  321,  323,  325,  327,  329,  331,  333,
      335,  337,  339,  341,  343,  345,  347,  349,  351,  353,
      355,  357,  359,  361,  362,  364,  367,  369,  369,  369,
      370,  371,  373,  375,  377,  379,  381,  384,  386,  388,
      390,  392,  394,  396,  398,  400,  402,  404,  406,  408,
      410,  412,  414,  416,  419,  422,  424,  426,  428,  430,
      432,  434,  436,  438,  440,  442,  445,  447,  449,  451,

      453,  456,  459,  462,  464,  466,  468,  470,  473,  475,
      477,  479,  481,  484,  486,  488,  491,  494,  496,  498,
      500,  502,  504,  506,  508,  510,  512,  514,  516,  518,
      520,  522,  524,  526,  529,  531,  533,  535,  537,  539,
      541,  543,  545,  547,  549,  551,  553,  555,  557,  560,
      562,  564,  566,  569,  571,  573,  575,  577,  579,  581,
      583,  585,  585,  585,  585,  585,  585,  586,  588,  590,
      592,  594,  596,  599,  601,  603,  606,  608,  611,  613,
      616,  619,  622,  624,  626,  628,  630,  632,  634,  636,
      638,  640,  642,  645,  648,  651,  653,  656,  658,  660,

      662,  664,  666,  668,  670,  673,  675,  677,  679,  681,
      683,  685,  687,  689,  691,  694,  697,  699,  701,  703,
      705,  708,  710,  712,  714,  716,  718,  720,  722,  724,
      726,  728,  730,  732,  734,  736,  738,  740,  742,  744,
      746,  748,  750,  752,  754,  756,  758,  761,  763,  765,
      768,  770,  772,  774,  777,  779,  782,  784,  786,  789,
      791,  793,  793,  793,  794,  794,  794,  794,  794,  796,
      798,  801,  803,  805,  807,  809,  812,  814,  817,  820,
      822,  825,  827,  829,  831,  833,  835,  837,  839,  841,
      843,  845,  847,  849,  851,  854,  856,  859,  861,  863,

      865,  867,  869,  871,  873,  875,  877,  879,  881,  883,
      885,  887,  889,  891,  893,  895,  898,  900,  902,  904,
      906,  909,  911,  913,  915,  917,  920,  922,  925,  927,
      929,  932,  934,  936,  938,  940,  942,  944,  946,  949,
      951,  953,  956,  958,  960,  962,  965,  967,  969,  971,
      974,  974,  975,  975,  976,  976,  978,  981,  984,  986,
      988,  991,  994,  996,  998, 1000, 1002, 1004, 1006, 1008,
     1010, 1013, 1016, 1019, 1022, 1024, 1027, 1029, 1031, 1033,
     1036, 1038, 1040, 1043, 1045, 1048, 1050, 1052, 1054, 1057,
     1059, 1062, 1065, 1067, 1069, 1071, 1073, 1075, 1078, 1080,

     1082, 1084, 1087, 1089, 1091, 1094, 1097, 1099, 1102, 1105,
     1108, 1111, 1113, 1115, 1118, 1120, 1122, 1124, 1126, 1128,
     1130, 1132, 1134, 1136, 1138, 1139, 1141, 1143, 1145, 1147,
     1149, 1151, 1153, 1155, 1158, 1161, 1163, 1166, 1169, 1172,
     1174, 1176, 1178, 1181, 1183, 1185, 1187, 1189, 1191, 1193,
     1195, 1198, 1200, 1202, 1204, 1206, 1208, 1211, 1213, 1215,
     1217, 1219, 1222, 1224, 1227, 1229, 1232, 1234, 1236, 1238,
     1240, 1242, 1245, 1247, 1250, 1252, 1254, 1257, 1259, 1261,
     1264, 1267, 1269, 1271, 1273, 1275, 1277, 1280, 1282, 1284,
     1286, 1288, 1291, 1294, 1296, 1298, 1300, 1303, 1305, 1308,

     1311, 1313, 1315, 1317, 1319, 1322, 1324, 1326, 1328, 1330,
     1333, 1335, 1337, 1340, 1342, 1345, 1347, 1349, 1352, 1355,
     1357, 1359, 1361, 1364, 1367, 1369, 1371, 1373, 1375, 1377,
     1379, 1381, 1384, 1387, 1389, 1391, 1393, 1395, 1397, 1399,
     1401, 1403, 1405, 1407, 1410, 1412, 1414, 1416, 1418, 1420,
     1422, 1424, 1426, 1428, 1430, 1432, 1434, 1437, 1439, 1441,
     1444, 1447, 1449, 1451, 1453, 1455, 1458, 1460, 1463, 1466,
     1469, 1471, 1474, 1476, 1478, 1480, 1483, 1485, 1488, 1490,
     1492, 1494, 1496, 1498, 1501, 1503, 1506, 1508, 1511, 1511
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    5,    1,    1,    1,    6,    7,
        7,    8,    9,    7,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   18,   20,   20,    7,    7,    7,
        7,    7,    1,    1,   21,   21,   22,   21,   23,   24,
       25,   25,   26,   25,   25,   25,   25,   25,   27,   28,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
        7,    1,    7,    1,   29,    1,   30,   31,   32,   33,

       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
       44,   45,   46,   47,   48,   49,   50,   51,   52,   53,
       54,   55,   56,    1,   57,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[58] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    3,    4,
        5,    1,    6,    6,    6,    6,    6,    6,    6,    6,
        7,    7,    8,    7,    9,    9,    9,    9,    9,    7,
        7,    7,    7,    8,    7,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    1,    1
    } ;

static yyconst flex_int16_t yy_base[708] =
    {   0,
        0,    0, 1557, 1558,   56,   58, 1552,    0, 1549, 1558,
       51,   75,   52,   65,   99,   73, 1544,   65,  144,   73,
       68,   53,    0,   77,   91,  136,   92,   87,   93,  131,
      137,  155,  138,  166,  140,  172,  146,  175,  177,  220,
      184,  101,  190,  141,   94,  111, 1558, 1558,   77, 1549,
     1558,    0, 1546, 1558,  226,  190,  203,   72,    0,  262,
      272,  283,  298,  165, 1543,    0, 1497,    0,    0, 1539,
      145,  306,  223,  226,  185,   66,  207,    0,  245,  237,
      213,  256,  284,  176,  240,  295,  299,  317,  238,  243,
      318,  321,  320,  327,  322,  325,  324,  326,  328,  333,

      334,  330,  336,  337,  331,  335,  246,  249,  122, 1538,
      339,  354, 1537,  341,  329,  342,  344,  343,  357,  345,
      360,  379,  372, 1536,  346,  375,  381,  386,  383,  242,
      390,  391,  388,  395,  397,  398,  394,  401,  405,  407,
      400,  406,  408,  419,  402,  413,  410,  429,  426,  440,
      423,  444,  446,  468,  478,  486,  449,  255,  454,    0,
        0,  480,  497,  498,  499,  461, 1535,  464,  501,  503,
      505,  506,  507,  508,  509,  510,  511,  512,  513,  514,
      450,  515,  518,  517,  516,  520,  529,  527,  523,  532,
      524,  542,  530,  543,  544,  545,  557,  559,  531,  558,

     1534, 1533, 1532,  560,  561,  562,  567,  571,  573,  575,
      570,  572, 1531,  576,  574, 1530, 1529,  577,  582,  578,
      581,  584,  587,  583,  586,  589,  588,  597,  415,  599,
      601,  604,  605, 1528,  611,  607,  608,  613,  618,  614,
      615,  623,  630,  624,  627,  629,  631,  633, 1527,  634,
      635,  638, 1526,  636,  637,  647,  641,  642,  650,  656,
      654, 1527,  669,  670, 1526,  681, 1521,  660,  674,  680,
      681,  682, 1522,  684,  686, 1521,  687, 1520,  688, 1519,
     1518, 1517,  689,  690,  691,  692,  695,  694,  696,  697,
      699,  701, 1516,  707, 1515,  704, 1514,  703,  709,  711,

      706,  726,  712,  729, 1513,  722,  743,  713,  714,  715,
      744,  725,  747,  752, 1512, 1511,  717,  753,  756,  757,
     1510,  758,  759,  760,  761,  763,  765,  768,  771,  769,
      770,  772,  778,  773,  780,  774,  779,  782,  783,  784,
      786,  785,  788,  789,  790,  796, 1509,  800,  801, 1508,
      806,  804,  812, 1507,  819, 1506,  821,  820, 1505,  823,
      824,  828,  830, 1558,  833,  838,  843,  848, 1558,  825,
     1504,  833,  848,  834,  849, 1503,  851, 1502, 1501,  852,
     1500,  858,  861,  853,  855,  862,  863,  865,  866,  868,
      876,  867,  870,  869, 1499,  874, 1498,  881,  879,  877,

      878,  880,  875,  898,  885,  882,  904,  883,  911,  884,
      889,  916,  887,  917,  922, 1497,  923,  924,  925,  926,
     1496,  927,  928,  930,  934, 1495,  932, 1494,  933,  936,
     1493,  935,  937,  938,  939,  941,  940,  950,  943,  944,
      945, 1492,  951,  953,  948, 1491,  955,  971,  957, 1490,
     1487, 1486,  977, 1558, 1485, 1484, 1485, 1484,  958,  980,
     1483, 1482,  982,  983,  985,  987,  989,  990,  988,  993,
     1481, 1480, 1479,  997,  995, 1478,  998, 1000, 1001, 1477,
     1006, 1004, 1476, 1005, 1475, 1008, 1011, 1014, 1474, 1016,
     1473, 1472, 1018, 1020, 1013, 1015, 1010, 1471, 1003, 1022,

     1037, 1470, 1021, 1044, 1469, 1468, 1047, 1467, 1466, 1465,
     1464, 1048, 1050, 1463, 1051, 1052, 1054, 1053, 1055, 1056,
     1057, 1058, 1060, 1059, 1460, 1063, 1062, 1065, 1064, 1069,
     1070, 1071, 1066, 1415, 1403, 1072, 1400, 1396, 1381, 1074,
     1073, 1076, 1371, 1079, 1083, 1092, 1093, 1080, 1104, 1110,
     1352, 1112, 1085, 1081, 1117, 1113, 1340, 1119, 1120, 1122,
     1121, 1339, 1124, 1338, 1125, 1336, 1123, 1127, 1128, 1129,
     1130, 1335, 1131, 1334, 1132, 1133, 1333, 1138, 1135, 1331,
     1330, 1137, 1139, 1141, 1144, 1142, 1329, 1148, 1143, 1152,
     1156, 1328, 1327, 1161, 1162, 1163, 1326, 1164, 1324, 1323,

     1169, 1170, 1177, 1179, 1322, 1184, 1182, 1183, 1187, 1321,
     1186, 1189, 1320, 1190, 1319, 1195, 1188, 1316, 1314, 1193,
     1198, 1194, 1313, 1312, 1199, 1200, 1196, 1202, 1201, 1206,
     1204, 1311, 1310, 1211, 1212, 1216, 1220, 1222, 1227, 1232,
     1233, 1240, 1235, 1309, 1241, 1242, 1243, 1245, 1246, 1250,
     1253, 1247, 1248, 1254, 1258, 1256, 1308, 1259, 1261, 1305,
     1302, 1262, 1266, 1265, 1274, 1300, 1275, 1249,  700,  465,
     1272,  460, 1277, 1279, 1281,  458, 1285,  332, 1289, 1290,
     1293, 1291, 1294,  250, 1295,  198, 1297,  182, 1558, 1351,
     1360, 1369, 1374, 1379, 1384, 1389, 1394, 1399, 1405, 1406,

     1414, 1423, 1427, 1435, 1444, 1453, 1462
    } ;

static yyconst flex_int16_t yy_def[708] =
    {   0,
      689,    1,  689,  689,  689,  689,  690,  691,  692,  689,
      693,  694,  689,  689,  689,  695,  696,  696,  696,  696,
      696,  696,  697,  696,  696,  696,  696,   19,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  689,  689,  689,  690,
      689,  691,  692,  689,  689,  698,  695,  699,  694,  694,
      694,   61,  694,  700,  701,  702,   15,  703,   57,  696,
      696,  689,   63,   19,  696,  696,  696,  697,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,

      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  689,   61,   61,   63,  704,  705,  702,
      703,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,

      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  704,  706,  704,  705,  707,  689,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,

      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  704,  704,  689,  704,  707,  705,  705,  689,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,

      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      689,  689,  705,  689,  689,  689,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,

      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  689,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,

      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,    0,  689,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,

      689,  689,  689,  689,  689,  689,  689
    } ;

static yyconst flex_int16_t yy_nxt[1616] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,    4,   11,   12,
       13,   14,   15,   16,   16,   16,   16,   16,   16,   16,
       17,   18,   19,   17,   17,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   17,
       34,   35,   36,   37,   38,   17,   39,   40,   41,   42,
       43,   44,   45,   46,   17,   47,   48,   49,   49,   49,
       49,   55,   59,   56,   64,   64,   64,   64,   64,   64,
       64,   64,   65,   58,   59,   59,   66,   59,   49,   49,
       72,   72,   59,   55,   58,   60,   59,   61,   62,   62,
       62,   62,   62,   62,   62,   58,   75,   63,   76,   77,

       59,   59,   59,   59,  164,   71,   58,   79,   63,   55,
       59,   67,   67,   67,   67,   67,   67,   67,   56,   80,
       59,   58,   99,   81,   82,   94,   83,   96,   84,   97,
      100,   59,   58,  101,   85,   95,  102,   86,  203,   98,
       59,  152,  103,  146,   87,   59,   59,   59,  153,   59,
       59,   68,   72,   73,   59,   59,   74,   74,   74,   74,
       74,   74,   74,   74,   59,   88,  106,  114,  107,  118,
      108,  104,   89,  109,  105,   59,   90,  150,  151,   91,
       92,   59,  162,   93,   59,   59,   59,   58,  122,  110,
      123,   59,  124,   59,   59,  115,  111,  112,   58,   59,

       55,  119,  113,  116,  125,  120,  131,   59,  126,  117,
      132,  127,   58,   55,  163,  121,   59,  142,  172,  147,
      143,  128,   59,   58,  129,   58,  133,  148,  130,   59,
      144,  689,   59,  149,  689,   59,   58,  145,   64,   64,
       64,   64,   64,   64,   64,   64,   59,   59,  168,   59,
      165,   59,   59,  134,   59,   59,  135,  136,   59,   59,
      137,  138,  263,  202,  201,   59,  264,  177,  139,  167,
      226,  140,  178,  141,  155,  155,  155,  155,  155,  155,
      155,  155,   60,  173,   61,   61,   61,   61,   61,   61,
       61,   61,  166,   59,   63,  156,  156,  156,  156,  156,

      156,  156,  156,  169,   59,   63,   72,   73,   59,  170,
      157,  157,  157,  157,  157,  157,  157,  157,  154,  154,
      154,  154,  154,  154,  154,  154,   59,   59,  174,   59,
       59,   59,  171,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,  175,   59,  179,
       59,   59,   59,   59,   59,   59,  182,  190,  183,  191,
      180,  184,  187,   59,  176,  181,   59,  185,  193,   59,
      210,  186,  188,  189,  192,  194,  196,  195,  197,  199,
      198,   59,  200,  204,   59,  205,  212,  213,   59,  211,
       59,  209,   59,  220,  206,   59,  216,   59,  214,   59,

       59,  207,  208,   59,   59,  215,   59,   59,  217,   59,
       59,   59,  218,  225,   59,   59,   59,   59,  231,   59,
      219,  221,   59,  223,   59,  222,  228,  227,   59,  224,
      239,  238,   59,  236,  240,   59,  229,  232,   59,  230,
      235,  233,  243,  234,  242,  245,  250,  244,  247,   59,
      251,  241,  237,   59,  246,   59,  253,  689,   59,   59,
      252,  266,  254,  256,  331,  267,  257,   59,  248,   59,
       59,  259,  249,   59,   59,  255,  260,  258,  287,  261,
      154,  154,  154,  154,  154,  154,  154,  154,   59,   59,
      155,  155,  155,  155,  155,  155,  155,  155,  156,  156,

      156,  156,  156,  156,  156,  156,   59,   59,   59,  272,
       59,  273,   59,  268,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,  269,   59,
      271,  270,   59,   59,  274,  277,   59,  279,   59,   59,
       59,   59,  280,  281,  288,  275,  290,  278,  276,  291,
      292,   59,   59,   59,   59,  297,  284,  282,  289,  283,
      294,  285,  286,  293,  295,  296,   59,   59,   59,   59,
       59,   59,  300,  301,  305,  298,   59,  299,  302,   59,
       59,   59,   59,   59,   59,   59,   59,   59,  303,  304,
       59,   59,   59,   59,  306,   59,   59,   59,   59,  310,

      307,  309,  313,  308,  312,  314,   59,  316,   59,  317,
       59,  318,  323,   59,   59,  311,   59,   59,  315,  320,
       59,  322,   59,   59,   59,  321,  327,   59,  319,  324,
      328,  326,   59,   59,  330,  329,   59,  325,   59,   59,
       59,  338,   59,   59,   59,   59,   59,   59,  332,  337,
       59,   59,  342,  334,  333,  335,   59,  336,  340,   59,
      339,  345,  341,   59,  343,   59,  350,  351,  346,   59,
      357,  344,  348,  349,  347,  353,  363,  263,  352,  356,
      364,  365,  358,   59,  360,  355,  359,  354,  368,   59,
       59,   59,  369,   59,  361,   59,   59,   59,   59,   59,

       59,   59,  370,   59,   59,   59,   59,  371,   59,   59,
       59,  372,   59,   59,  373,   59,   59,  376,   59,  380,
       59,   59,   59,   59,   59,  387,   59,  378,  374,  382,
      375,   59,  383,  377,   59,   59,  379,  384,   59,  381,
      386,  390,  395,  385,  391,  393,  388,  389,  392,  394,
      401,  396,   59,   59,  397,  398,   59,  405,  400,  403,
      399,   59,   59,  404,  410,   59,   59,   59,   59,   59,
       59,  407,   59,  406,   59,  408,  402,   59,   59,   59,
       59,   59,   59,   59,  409,  412,  414,   59,   59,   59,
      417,   59,   59,   59,   59,   59,  418,   59,   59,   59,

      413,  415,  419,  411,  421,   59,  425,  423,  416,   59,
       59,  420,  429,   59,  426,   59,  422,  427,  424,  435,
      436,   59,  428,  433,  432,  430,  437,  434,   59,   59,
       59,  431,   59,   59,   59,  263,  438,  263,  441,  451,
      263,  452,   59,   59,  365,  453,  442,  443,  440,  454,
      366,  439,  447,  446,  455,  266,  450,   59,   59,  456,
       59,   59,   59,  460,   59,  448,  449,   59,  444,  445,
       59,   59,   59,  457,   59,   59,   59,   59,   59,   59,
      463,  458,  466,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,  459,   59,  461,   59,  471,

      464,  472,  475,  465,  462,  470,  468,   59,  467,  469,
      473,  476,  478,   59,  477,  474,  479,  480,  485,  481,
       59,  482,  491,  483,  486,   59,   59,  488,  490,  493,
      484,   59,   59,   59,   59,   59,   59,   59,  487,   59,
      489,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,  495,   59,   59,   59,  497,  498,   59,  499,   59,
       59,  494,   59,  504,   59,  505,   59,   59,  508,  492,
      506,  496,  502,  509,  501,  500,  503,  511,  516,  513,
       59,  515,  518,  507,  366,  519,  512,  510,  525,   59,
      514,   59,   59,  517,   59,  520,   59,   59,   59,   59,

      522,  524,   59,  521,   59,  526,   59,   59,  523,   59,
       59,  527,   59,   59,   59,   59,  530,   59,  533,   59,
       59,  534,   59,   59,   59,   59,  528,   59,  531,   59,
       59,   59,  529,  532,  536,  541,  539,  542,  543,  544,
      545,  535,  537,  546,  540,  547,   59,  548,  551,  549,
      556,  538,  553,   59,  550,  554,   59,   59,  552,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
      555,   59,   59,   59,   59,   59,  558,  557,   59,   59,
       59,   59,   59,   59,  561,   59,  562,  563,   59,   59,
       59,  559,   59,  564,   59,  565,  566,  574,  560,  568,

      569,   59,   59,  576,  577,  567,  571,  570,  578,  575,
      572,  573,  583,   59,  584,  579,  580,  581,  582,   59,
      587,   59,   59,  585,  586,  591,   59,  592,   59,   59,
       59,   59,   59,   59,   59,  588,   59,   59,   59,   59,
       59,   59,   59,  589,   59,  590,   59,   59,   59,  593,
       59,   59,   59,   59,  594,  597,  599,   59,  600,  595,
      602,   59,  596,  598,  606,   59,  604,  609,  603,  601,
       59,   59,   59,   59,  613,  615,  605,  610,   59,   59,
      608,  607,  612,  614,  618,  611,   59,  616,   59,  619,
      617,   59,   59,   59,  620,   59,   59,   59,   59,   59,

      622,  621,   59,   59,   59,   59,  626,   59,   59,   59,
       59,   59,  623,   59,  629,   59,  624,  625,  628,  634,
       59,   59,  627,  633,  635,   59,  638,  630,  631,   59,
      641,   59,  636,  632,  644,  645,   59,  646,  642,  643,
      637,   59,   59,  640,   59,  649,  647,  648,  639,   59,
       59,   59,   59,  651,   59,   59,   59,   59,   59,   59,
      653,  654,   59,   59,  650,   59,  652,   59,   59,  656,
       59,   59,  658,  655,   59,   59,  660,  662,  661,  663,
      666,   59,  664,   59,   59,  667,   59,  657,   59,  659,
       59,  668,  670,  665,   59,  672,  669,  673,   59,   59,

       59,  677,   59,   59,   59,  671,   59,  675,  676,   59,
      678,   59,  679,  674,   59,  680,  681,   59,   59,   59,
       59,   59,   59,   59,  682,   59,  684,  683,   59,   59,
       59,   59,   59,   59,  685,   59,   59,   59,   59,   59,
       59,  687,   59,   59,   59,   59,  686,   59,   59,   59,
      688,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       52,   59,   52,   52,   52,   52,   52,   52,   52,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   57,   57,
       59,   57,   59,   59,   59,   59,   59,   59,   69,   69,
       59,   69,   70,   70,   70,   70,   70,   70,   78,   78,

       78,   78,   78,   56,   56,   59,   56,  154,  154,   59,
      154,   64,   59,   64,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  160,   59,  160,  160,  160,  160,  160,
      160,  160,  161,  161,  161,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,  367,  367,  362,  362,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,  367,  366,  263,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,  689,
      159,   54,   51,   59,   54,   51,  689,    3,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,

      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  689
    } ;

static yyconst flex_int16_t yy_chk[1616] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    5,    5,    6,
        6,   11,   22,   11,   13,   13,   13,   13,   13,   13,
       13,   13,   14,   11,   18,   76,   14,   21,   49,   49,
       58,   58,   20,   16,   11,   12,   24,   12,   12,   12,
       12,   12,   12,   12,   12,   16,   20,   12,   21,   22,

       25,   27,   29,   45,   76,   18,   16,   24,   12,   15,
       42,   15,   15,   15,   15,   15,   15,   15,   15,   24,
       46,   15,   29,   24,   24,   27,   24,   28,   25,   28,
       29,  109,   15,   29,   25,   27,   29,   25,  109,   28,
       30,   45,   29,   42,   25,   26,   31,   33,   46,   35,
       44,   15,   19,   19,   71,   37,   19,   19,   19,   19,
       19,   19,   19,   19,   32,   26,   31,   33,   32,   35,
       32,   30,   26,   32,   30,   34,   26,   44,   44,   26,
       26,   36,   71,   26,   38,   84,   39,   64,   37,   32,
       37,  688,   37,   41,   75,   34,   32,   32,   64,   43,

       56,   36,   32,   34,   38,   36,   39,  686,   38,   34,
       39,   38,   56,   57,   75,   36,   77,   41,   84,   43,
       41,   38,   81,   56,   38,   57,   39,   43,   38,   40,
       41,   73,   73,   43,   74,   74,   57,   41,   55,   55,
       55,   55,   55,   55,   55,   55,   80,   89,   81,   85,
       77,  130,   90,   40,   79,  107,   40,   40,  108,  684,
       40,   40,  158,  108,  107,   82,  158,   89,   40,   80,
      130,   40,   90,   40,   60,   60,   60,   60,   60,   60,
       60,   60,   61,   85,   61,   61,   61,   61,   61,   61,
       61,   61,   79,   83,   61,   62,   62,   62,   62,   62,

       62,   62,   62,   82,   86,   61,   63,   63,   87,   82,
       63,   63,   63,   63,   63,   63,   63,   63,   72,   72,
       72,   72,   72,   72,   72,   72,   88,   91,   86,   93,
       92,   95,   83,   97,   96,   98,   94,   99,  115,  102,
      105,  678,  100,  101,  106,  103,  104,   87,  111,   91,
      114,  116,  118,  117,  120,  125,   93,   98,   94,   98,
       91,   94,   96,  112,   88,   92,  119,   94,   99,  121,
      115,   95,   96,   97,   98,  100,  102,  101,  103,  105,
      104,  123,  106,  111,  126,  112,  117,  118,  122,  116,
      127,  114,  129,  125,  112,  128,  120,  133,  119,  131,

      132,  112,  112,  137,  134,  119,  135,  136,  121,  141,
      138,  145,  122,  129,  139,  142,  140,  143,  133,  147,
      123,  126,  146,  128,  229,  127,  132,  131,  144,  128,
      138,  137,  151,  136,  139,  149,  132,  134,  148,  132,
      135,  134,  141,  134,  140,  143,  145,  142,  144,  150,
      146,  139,  136,  152,  143,  153,  147,  157,  157,  181,
      146,  159,  148,  149,  229,  159,  149,  676,  144,  672,
      166,  151,  144,  168,  670,  148,  152,  150,  181,  153,
      154,  154,  154,  154,  154,  154,  154,  154,  155,  162,
      155,  155,  155,  155,  155,  155,  155,  155,  156,  156,

      156,  156,  156,  156,  156,  156,  163,  164,  165,  166,
      169,  168,  170,  162,  171,  172,  173,  174,  175,  176,
      177,  178,  179,  180,  182,  185,  184,  183,  163,  186,
      165,  164,  189,  191,  169,  172,  188,  174,  187,  193,
      199,  190,  175,  176,  182,  170,  184,  173,  171,  185,
      186,  192,  194,  195,  196,  191,  179,  177,  183,  178,
      188,  180,  180,  187,  189,  190,  197,  200,  198,  204,
      205,  206,  194,  195,  199,  192,  207,  193,  196,  211,
      208,  212,  209,  215,  210,  214,  218,  220,  197,  198,
      221,  219,  224,  222,  200,  225,  223,  227,  226,  206,

      204,  205,  209,  204,  208,  210,  228,  212,  230,  214,
      231,  215,  222,  232,  233,  207,  236,  237,  211,  219,
      235,  221,  238,  240,  241,  220,  225,  239,  218,  223,
      226,  224,  242,  244,  228,  227,  245,  223,  246,  243,
      247,  237,  248,  250,  251,  254,  255,  252,  230,  236,
      257,  258,  241,  232,  231,  233,  256,  235,  239,  259,
      238,  243,  240,  261,  241,  260,  248,  250,  244,  268,
      257,  242,  246,  247,  245,  252,  263,  264,  251,  256,
      263,  264,  258,  269,  260,  255,  259,  254,  266,  270,
      271,  272,  266,  274,  261,  275,  277,  279,  283,  284,

      285,  286,  268,  288,  287,  289,  290,  269,  291,  669,
      292,  270,  298,  296,  271,  301,  294,  275,  299,  284,
      300,  303,  308,  309,  310,  289,  317,  279,  272,  286,
      274,  306,  287,  277,  312,  302,  283,  287,  304,  285,
      288,  292,  299,  287,  294,  298,  290,  291,  296,  298,
      306,  300,  307,  311,  301,  302,  313,  310,  304,  308,
      303,  314,  318,  309,  317,  319,  320,  322,  323,  324,
      325,  312,  326,  311,  327,  313,  307,  328,  330,  331,
      329,  332,  334,  336,  314,  319,  322,  333,  337,  335,
      325,  338,  339,  340,  342,  341,  326,  343,  344,  345,

      320,  323,  327,  318,  329,  346,  333,  331,  324,  348,
      349,  328,  337,  352,  334,  351,  330,  335,  332,  343,
      344,  353,  336,  341,  340,  338,  345,  342,  355,  358,
      357,  339,  360,  361,  370,  362,  346,  363,  351,  362,
      365,  363,  372,  374,  365,  366,  352,  353,  349,  366,
      367,  348,  360,  358,  367,  368,  361,  373,  375,  368,
      377,  380,  384,  374,  385,  360,  360,  382,  355,  357,
      383,  386,  387,  370,  388,  389,  392,  390,  394,  393,
      380,  372,  384,  396,  403,  391,  400,  401,  399,  402,
      398,  406,  408,  410,  405,  373,  413,  375,  411,  389,

      382,  390,  393,  383,  377,  388,  386,  404,  385,  387,
      391,  394,  398,  407,  396,  392,  399,  400,  405,  401,
      409,  402,  411,  403,  406,  412,  414,  408,  410,  413,
      404,  415,  417,  418,  419,  420,  422,  423,  407,  424,
      409,  427,  429,  425,  432,  430,  433,  434,  435,  437,
      436,  415,  439,  440,  441,  418,  419,  445,  420,  438,
      443,  414,  444,  427,  447,  429,  449,  459,  433,  412,
      430,  417,  424,  434,  423,  422,  425,  436,  441,  438,
      448,  440,  444,  432,  453,  445,  437,  435,  453,  460,
      439,  463,  464,  443,  465,  447,  466,  469,  467,  468,

      448,  449,  470,  447,  475,  459,  474,  477,  448,  478,
      479,  460,  499,  482,  484,  481,  465,  486,  468,  497,
      487,  469,  495,  488,  496,  490,  463,  493,  466,  494,
      503,  500,  464,  467,  474,  481,  478,  482,  484,  486,
      487,  470,  475,  488,  479,  490,  501,  493,  496,  494,
      503,  477,  499,  504,  495,  500,  507,  512,  497,  513,
      515,  516,  518,  517,  519,  520,  521,  522,  524,  523,
      501,  527,  526,  529,  528,  533,  507,  504,  530,  531,
      532,  536,  541,  540,  515,  542,  516,  517,  544,  548,
      554,  512,  545,  518,  553,  519,  520,  529,  513,  522,

      523,  546,  547,  531,  532,  521,  526,  524,  533,  530,
      527,  528,  544,  549,  545,  536,  540,  541,  542,  550,
      548,  552,  556,  546,  547,  553,  555,  554,  558,  559,
      561,  560,  567,  563,  565,  549,  568,  569,  570,  571,
      573,  575,  576,  550,  579,  552,  582,  578,  583,  555,
      584,  586,  589,  585,  556,  560,  563,  588,  565,  558,
      568,  590,  559,  561,  573,  591,  570,  578,  569,  567,
      594,  595,  596,  598,  584,  586,  571,  579,  601,  602,
      576,  575,  583,  585,  590,  582,  603,  588,  604,  591,
      589,  607,  608,  606,  594,  611,  609,  617,  612,  614,

      596,  595,  620,  622,  616,  627,  603,  621,  625,  626,
      629,  628,  598,  631,  607,  630,  601,  602,  606,  614,
      634,  635,  604,  612,  616,  636,  621,  608,  609,  637,
      626,  638,  617,  611,  629,  630,  639,  631,  627,  628,
      620,  640,  641,  625,  643,  636,  634,  635,  622,  642,
      645,  646,  647,  638,  648,  649,  652,  653,  668,  650,
      639,  640,  651,  654,  637,  656,  638,  655,  658,  642,
      659,  662,  645,  641,  664,  663,  647,  649,  648,  650,
      653,  671,  651,  665,  667,  654,  673,  643,  674,  646,
      675,  655,  658,  652,  677,  662,  656,  663,  679,  680,

      682,  671,  681,  683,  685,  659,  687,  665,  667,  666,
      673,  661,  674,  664,  660,  675,  677,  657,  644,  633,
      632,  624,  623,  619,  679,  618,  681,  680,  615,  613,
      610,  605,  600,  599,  682,  597,  593,  592,  587,  581,
      580,  685,  577,  574,  572,  566,  683,  564,  562,  557,
      687,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      691,  551,  691,  691,  691,  691,  691,  691,  691,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  693,  693,
      543,  693,  694,  694,  694,  694,  694,  694,  695,  695,
      539,  695,  696,  696,  696,  696,  696,  696,  697,  697,

      697,  697,  697,  698,  698,  538,  698,  699,  699,  537,
      699,  700,  535,  700,  701,  701,  701,  701,  701,  701,
      701,  701,  701,  702,  534,  702,  702,  702,  702,  702,
      702,  702,  703,  703,  703,  704,  704,  704,  704,  704,
      704,  704,  704,  704,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  707,  707,  707,  707,  707,  707,  707,  707,
      707,  525,  514,  511,  510,  509,  508,  506,  505,  502,
      498,  492,  491,  489,  485,  483,  480,  476,  473,  472,
      471,  462,  461,  458,  457,  456,  455,  452,  451,  450,

      446,  442,  431,  428,  426,  421,  416,  397,  395,  381,
      379,  378,  376,  371,  359,  356,  354,  350,  347,  321,
      316,  315,  305,  297,  295,  293,  282,  281,  280,  278,
      276,  273,  267,  265,  262,  253,  249,  234,  217,  216,
      213,  203,  202,  201,  167,  124,  113,  110,   70,   67,
       65,   53,   50,   17,    9,    7,    3,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,

      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  689
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[145] =
    {   0,
1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 1, 1, 0, 0,     };

extern int yy_flex_debug;
int yy_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
++(yy_lp); \
goto find_rule; \
}

static int yy_more_offset = 0;
static int yy_prev_more_offset = 0;
#define yymore() ((yy_more_offset) = yy_flex_strlen( yytext ))
#define YY_NEED_STRLEN
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET \
	{ \
	(yy_more_offset) = (yy_prev_more_offset); \
	yyleng -= (yy_more_offset); \
	}
#ifndef YYLMAX
#define YYLMAX 8192
#endif

char yytext[YYLMAX];
char *yytext_ptr;
#line 1 "thriftl.ll"
/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/**
 * Thrift scanner.
 *
 * Tokenizes a thrift definition file.
 */
#line 28 "thriftl.ll"

#include <errno.h>

#include "thrift/compiler/main.h"
#include "thrift/compiler/globals.h"
#include "thrift/compiler/parse/t_program.h"

/**
 * Must be included AFTER parse/t_program.h, but I can't remember why anymore
 * because I wrote this a while ago.
 *
 * Note macro expansion because this is different between OSS and internal
 * build, sigh.
 */
#include "thrifty.hh"

void thrift_reserved_keyword(char* keyword) {
  yyerror("Cannot use reserved language keyword: \"%s\"\n", keyword);
  exit(1);
}

void integer_overflow(char* text) {
  yyerror("This integer is too big: \"%s\"\n", text);
  exit(1);
}

void unexpected_token(char* text) {
  yyerror("Unexpected token in input: \"%s\"\n", text);
  exit(1);
}

/**
 * Current level of '{}' blocks. Some keywords (e.g. 'view') are considered as
 * reserved only if appears at the top level and might be used for other
 * purposes like field or argument names.
 */
int g_scope_level = 0;

/**
 * Provides the yylineno global, useful for debugging output
 */
/**
 * Helper definitions, comments, constants, and whatnot
 */
#line 1333 "thriftl.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 94 "thriftl.ll"


#line 1523 "thriftl.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 690 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1558 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
					{
					(yy_full_match) = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = (yy_prev_more_offset); yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )

    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 96 "thriftl.ll"
{ /* do nothing */                 }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 97 "thriftl.ll"
{ /* do nothing */                 }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 98 "thriftl.ll"
{ /* do nothing */                 }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 99 "thriftl.ll"
{ /* do nothing */                 }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 100 "thriftl.ll"
{ /* do nothing */                 }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 102 "thriftl.ll"
{
  ++g_scope_level;
  return yytext[0];
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 106 "thriftl.ll"
{
  --g_scope_level;
  return yytext[0];
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 110 "thriftl.ll"
{ return yytext[0];                }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 112 "thriftl.ll"
{ return tok_namespace;            }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 113 "thriftl.ll"
{ return tok_cpp_namespace;        }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 114 "thriftl.ll"
{ return tok_cpp_include;          }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 115 "thriftl.ll"
{
  yyerror("\"cpp_type\" is no longer allowed. "
    "Use the cpp.type annotation instead.\n");
  exit(1);
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 120 "thriftl.ll"
{ return tok_java_package;         }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 121 "thriftl.ll"
{ return tok_cocoa_prefix;         }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 122 "thriftl.ll"
{ return tok_csharp_namespace;     }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 123 "thriftl.ll"
{ return tok_php_namespace;        }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 124 "thriftl.ll"
{ return tok_py_module;            }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 125 "thriftl.ll"
{ return tok_perl_package;         }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 126 "thriftl.ll"
{ return tok_ruby_namespace;       }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 127 "thriftl.ll"
{ return tok_smalltalk_category;   }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 128 "thriftl.ll"
{ return tok_smalltalk_prefix;     }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 129 "thriftl.ll"
{ return tok_xsd_all;              }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 130 "thriftl.ll"
{ return tok_xsd_optional;         }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 131 "thriftl.ll"
{ return tok_xsd_nillable;         }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 132 "thriftl.ll"
{ return tok_xsd_namespace;        }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 133 "thriftl.ll"
{ return tok_xsd_attrs;            }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 134 "thriftl.ll"
{ return tok_include;              }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 135 "thriftl.ll"
{ return tok_void;                 }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 136 "thriftl.ll"
{ return tok_bool;                 }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 137 "thriftl.ll"
{ return tok_byte;                 }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 138 "thriftl.ll"
{ return tok_i16;                  }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 139 "thriftl.ll"
{ return tok_i32;                  }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 140 "thriftl.ll"
{ return tok_i64;                  }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 141 "thriftl.ll"
{ return tok_double;               }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 142 "thriftl.ll"
{ return tok_float;                }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 143 "thriftl.ll"
{ return tok_string;               }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 144 "thriftl.ll"
{ return tok_binary;               }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 145 "thriftl.ll"
{ return tok_slist;                }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 146 "thriftl.ll"
{ return tok_senum;                }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 147 "thriftl.ll"
{ return tok_map;                  }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 148 "thriftl.ll"
{ return tok_hash_map;             }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 149 "thriftl.ll"
{ return tok_list;                 }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 150 "thriftl.ll"
{ return tok_set;                  }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 151 "thriftl.ll"
{ return tok_oneway;               }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 152 "thriftl.ll"
{ return tok_typedef;              }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 153 "thriftl.ll"
{ return tok_struct;               }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 154 "thriftl.ll"
{ return tok_union;                }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 155 "thriftl.ll"
{
  if (g_scope_level != 0) {
    yylval.id = strdup(yytext);
    return tok_identifier;
  }
  return tok_view;
}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 162 "thriftl.ll"
{ return tok_xception;             }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 163 "thriftl.ll"
{ return tok_extends;              }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 164 "thriftl.ll"
{ return tok_throws;               }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 165 "thriftl.ll"
{ return tok_service;              }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 166 "thriftl.ll"
{ return tok_enum;                 }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 167 "thriftl.ll"
{ return tok_const;                }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 168 "thriftl.ll"
{ return tok_required;             }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 169 "thriftl.ll"
{ return tok_optional;             }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 170 "thriftl.ll"
{
  pwarning(0, "\"async\" is deprecated.  It is called \"oneway\" now.\n");
  return tok_oneway;
}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 176 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 177 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 178 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 179 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 180 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 181 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 182 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 183 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 184 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 185 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 186 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 187 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 188 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 189 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 190 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 191 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 192 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 193 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 194 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 195 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 196 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 197 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 198 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 199 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 200 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 201 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 202 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 203 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 204 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 205 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 206 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 207 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 208 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 209 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 210 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 211 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 212 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 213 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 214 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 215 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 216 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 217 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 218 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 219 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 220 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 221 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 222 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 223 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 224 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 225 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 226 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 227 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 228 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 229 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 230 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 231 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 232 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 233 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 234 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 235 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 236 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 237 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 238 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 239 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 240 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 241 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 242 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 243 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 244 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 245 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 246 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 247 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 248 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 249 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 250 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 251 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 253 "thriftl.ll"
{
  errno = 0;
  yylval.iconst = strtoll(yytext+1, NULL, 8);
  if (errno == ERANGE) {
    integer_overflow(yytext);
  }
  return tok_int_constant;
}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 262 "thriftl.ll"
{
  errno = 0;
  yylval.iconst = strtoll(yytext, NULL, 10);
  if (errno == ERANGE) {
    integer_overflow(yytext);
  }
  return tok_int_constant;
}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 271 "thriftl.ll"
{
  errno = 0;
  yylval.iconst = strtoll(yytext+2, NULL, 16);
  if (errno == ERANGE) {
    integer_overflow(yytext);
  }
  return tok_int_constant;
}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 280 "thriftl.ll"
{
  yylval.dconst = atof(yytext);
  return tok_dub_constant;
}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 285 "thriftl.ll"
{
  yylval.id = strdup(yytext);
  return tok_identifier;
}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 290 "thriftl.ll"
{
  yylval.id = strdup(yytext);
  return tok_st_identifier;
}
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 295 "thriftl.ll"
{
  yylval.id = strdup(yytext+1);
  yylval.id[strlen(yylval.id)-1] = '\0';
  return tok_literal;
}
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
#line 301 "thriftl.ll"
{
  yylval.id = strdup(yytext+1);
  yylval.id[strlen(yylval.id)-1] = '\0';
  return tok_literal;
}
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
#line 307 "thriftl.ll"
{
 /* This does not show up in the parse tree. */
 /* Rather, the parser will grab it out of the global. */
  if (g_parse_mode == PROGRAM) {
    clear_doctext();
    g_doctext = strdup(yytext + 3);
    g_doctext[strlen(g_doctext) - 2] = '\0';
    g_doctext = clean_up_doctext(g_doctext);
    g_doctext_lineno = yylineno;
  }
}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 319 "thriftl.ll"
{
  unexpected_token(yytext);
}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 324 "thriftl.ll"
ECHO;
	YY_BREAK
#line 2419 "thriftl.cc"
			case YY_STATE_EOF(INITIAL):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = (yy_start);

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 690 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 690 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 689);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;

    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;

	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )

    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 *
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 *
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 *
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 *
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;

	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;

	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 *
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;

	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 *
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 *
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{

	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 *
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 *
 */
int yyget_lineno  (void)
{

    return yylineno;
}

/** Get the input stream.
 *
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 *
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 *
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 *
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 *
 */
void yyset_lineno (int  line_number )
{

    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 *
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    yyfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 324 "thriftl.ll"



/* vim: filetype=lex
*/

