/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "frozen_reflection.h"
#include <thrift/lib/cpp/Reflection.h>

namespace apache { namespace thrift { namespace frozen { namespace schema { namespace frozen_reflection_ {

// Reflection initializer for struct frozen.Field
void reflectionInitializer_2361056240366028172(::apache::thrift::reflection::Schema& schema) {
  const uint64_t id = 2361056240366028172U;
  if (schema.dataTypes.count(id)) return;
  ::apache::thrift::reflection::DataType& dt = schema.dataTypes[id];
  dt.name = "struct frozen.Field";
  schema.names[dt.name] = id;
  dt.__isset.fields = true;
  {
    ::apache::thrift::reflection::StructField& f = dt.fields[1];
    f.isRequired = true;
    f.type = 4U;
    f.name = "layoutId";
    f.order = 0;
  }
  {
    ::apache::thrift::reflection::StructField& f = dt.fields[2];
    f.isRequired = true;
    f.type = 4U;
    f.name = "offset";
    f.order = 1;
  }
}

void  reflectionInitializer_2361056240366028172(::apache::thrift::reflection::Schema&);  // struct frozen.Field
// Reflection initializer for map<i16, struct frozen.Field>
void reflectionInitializer_9262368615927019019(::apache::thrift::reflection::Schema& schema) {
  const uint64_t id = 9262368615927019019U;
  if (schema.dataTypes.count(id)) return;
  ::apache::thrift::reflection::DataType& dt = schema.dataTypes[id];
  dt.name = "map<i16, struct frozen.Field>";
  schema.names[dt.name] = id;
  dt.__isset.mapKeyType = true;
  dt.mapKeyType = 4U;
  dt.__isset.valueType = true;
  dt.valueType = 2361056240366028172U;
  reflectionInitializer_2361056240366028172(schema);  // struct frozen.Field
}

void  reflectionInitializer_9262368615927019019(::apache::thrift::reflection::Schema&);  // map<i16, struct frozen.Field>
// Reflection initializer for struct frozen.Layout
void reflectionInitializer_3221448234020655692(::apache::thrift::reflection::Schema& schema) {
  const uint64_t id = 3221448234020655692U;
  if (schema.dataTypes.count(id)) return;
  ::apache::thrift::reflection::DataType& dt = schema.dataTypes[id];
  dt.name = "struct frozen.Layout";
  schema.names[dt.name] = id;
  dt.__isset.fields = true;
  {
    ::apache::thrift::reflection::StructField& f = dt.fields[1];
    f.isRequired = true;
    f.type = 5U;
    f.name = "size";
    f.order = 0;
  }
  {
    ::apache::thrift::reflection::StructField& f = dt.fields[2];
    f.isRequired = true;
    f.type = 4U;
    f.name = "bits";
    f.order = 1;
  }
  {
    ::apache::thrift::reflection::StructField& f = dt.fields[3];
    f.isRequired = true;
    f.type = 9262368615927019019U;
    f.name = "fields";
    f.order = 2;
  }
  {
    ::apache::thrift::reflection::StructField& f = dt.fields[4];
    f.isRequired = true;
    f.type = 1U;
    f.name = "typeName";
    f.order = 3;
  }
  reflectionInitializer_9262368615927019019(schema);  // map<i16, struct frozen.Field>
}

void  reflectionInitializer_3221448234020655692(::apache::thrift::reflection::Schema&);  // struct frozen.Layout
// Reflection initializer for map<i16, struct frozen.Layout>
void reflectionInitializer_14969847861280329259(::apache::thrift::reflection::Schema& schema) {
  const uint64_t id = 14969847861280329259U;
  if (schema.dataTypes.count(id)) return;
  ::apache::thrift::reflection::DataType& dt = schema.dataTypes[id];
  dt.name = "map<i16, struct frozen.Layout>";
  schema.names[dt.name] = id;
  dt.__isset.mapKeyType = true;
  dt.mapKeyType = 4U;
  dt.__isset.valueType = true;
  dt.valueType = 3221448234020655692U;
  reflectionInitializer_3221448234020655692(schema);  // struct frozen.Layout
}

void  reflectionInitializer_14969847861280329259(::apache::thrift::reflection::Schema&);  // map<i16, struct frozen.Layout>
// Reflection initializer for struct frozen.Schema
void reflectionInitializer_6060681111115730220(::apache::thrift::reflection::Schema& schema) {
  const uint64_t id = 6060681111115730220U;
  if (schema.dataTypes.count(id)) return;
  ::apache::thrift::reflection::DataType& dt = schema.dataTypes[id];
  dt.name = "struct frozen.Schema";
  schema.names[dt.name] = id;
  dt.__isset.fields = true;
  {
    ::apache::thrift::reflection::StructField& f = dt.fields[4];
    f.isRequired = true;
    f.type = 5U;
    f.name = "fileVersion";
    f.order = 0;
  }
  {
    ::apache::thrift::reflection::StructField& f = dt.fields[1];
    f.isRequired = true;
    f.type = 2U;
    f.name = "relaxTypeChecks";
    f.order = 1;
  }
  {
    ::apache::thrift::reflection::StructField& f = dt.fields[2];
    f.isRequired = true;
    f.type = 14969847861280329259U;
    f.name = "layouts";
    f.order = 2;
  }
  {
    ::apache::thrift::reflection::StructField& f = dt.fields[3];
    f.isRequired = true;
    f.type = 4U;
    f.name = "rootLayout";
    f.order = 3;
  }
  reflectionInitializer_14969847861280329259(schema);  // map<i16, struct frozen.Layout>
}

}}}}} // namespace

