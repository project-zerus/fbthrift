/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "reflection_reflection.h"
#include <thrift/lib/cpp/Reflection.h>

namespace apache { namespace thrift { namespace reflection { namespace reflection_reflection_ {

// Reflection initializer for map<string, string>
void reflectionInitializer_9246346592659763371(::apache::thrift::reflection::Schema& schema) {
  const uint64_t id = 9246346592659763371U;
  if (schema.dataTypes.count(id)) return;
  ::apache::thrift::reflection::DataType& dt = schema.dataTypes[id];
  dt.name = "map<string, string>";
  schema.names[dt.name] = id;
  dt.__isset.mapKeyType = true;
  dt.mapKeyType = 1U;
  dt.__isset.valueType = true;
  dt.valueType = 1U;
}

void  reflectionInitializer_9246346592659763371(::apache::thrift::reflection::Schema&);  // map<string, string>
// Reflection initializer for struct reflection.StructField
void reflectionInitializer_214309804125196972(::apache::thrift::reflection::Schema& schema) {
  const uint64_t id = 214309804125196972U;
  if (schema.dataTypes.count(id)) return;
  ::apache::thrift::reflection::DataType& dt = schema.dataTypes[id];
  dt.name = "struct reflection.StructField";
  schema.names[dt.name] = id;
  dt.__isset.fields = true;
  {
    ::apache::thrift::reflection::StructField& f = dt.fields[1];
    f.isRequired = true;
    f.type = 2U;
    f.name = "isRequired";
    f.order = 0;
  }
  {
    ::apache::thrift::reflection::StructField& f = dt.fields[2];
    f.isRequired = true;
    f.type = 6U;
    f.name = "type";
    f.order = 1;
  }
  {
    ::apache::thrift::reflection::StructField& f = dt.fields[3];
    f.isRequired = true;
    f.type = 1U;
    f.name = "name";
    f.order = 2;
  }
  {
    ::apache::thrift::reflection::StructField& f = dt.fields[4];
    f.isRequired = false;
    f.type = 9246346592659763371U;
    f.name = "annotations";
    f.order = 3;
  }
  {
    ::apache::thrift::reflection::StructField& f = dt.fields[5];
    f.isRequired = true;
    f.type = 4U;
    f.name = "order";
    f.order = 4;
  }
  reflectionInitializer_9246346592659763371(schema);  // map<string, string>
}

void  reflectionInitializer_214309804125196972(::apache::thrift::reflection::Schema&);  // struct reflection.StructField
// Reflection initializer for map<i16, struct reflection.StructField>
void reflectionInitializer_8040686326052690155(::apache::thrift::reflection::Schema& schema) {
  const uint64_t id = 8040686326052690155U;
  if (schema.dataTypes.count(id)) return;
  ::apache::thrift::reflection::DataType& dt = schema.dataTypes[id];
  dt.name = "map<i16, struct reflection.StructField>";
  schema.names[dt.name] = id;
  dt.__isset.mapKeyType = true;
  dt.mapKeyType = 4U;
  dt.__isset.valueType = true;
  dt.valueType = 214309804125196972U;
  reflectionInitializer_214309804125196972(schema);  // struct reflection.StructField
}

// Reflection initializer for map<string, i32>
void reflectionInitializer_13380114062027473323(::apache::thrift::reflection::Schema& schema) {
  const uint64_t id = 13380114062027473323U;
  if (schema.dataTypes.count(id)) return;
  ::apache::thrift::reflection::DataType& dt = schema.dataTypes[id];
  dt.name = "map<string, i32>";
  schema.names[dt.name] = id;
  dt.__isset.mapKeyType = true;
  dt.mapKeyType = 1U;
  dt.__isset.valueType = true;
  dt.valueType = 5U;
}

void  reflectionInitializer_13380114062027473323(::apache::thrift::reflection::Schema&);  // map<string, i32>
void  reflectionInitializer_8040686326052690155(::apache::thrift::reflection::Schema&);  // map<i16, struct reflection.StructField>
// Reflection initializer for struct reflection.DataType
void reflectionInitializer_4733295045172396908(::apache::thrift::reflection::Schema& schema) {
  const uint64_t id = 4733295045172396908U;
  if (schema.dataTypes.count(id)) return;
  ::apache::thrift::reflection::DataType& dt = schema.dataTypes[id];
  dt.name = "struct reflection.DataType";
  schema.names[dt.name] = id;
  dt.__isset.fields = true;
  {
    ::apache::thrift::reflection::StructField& f = dt.fields[1];
    f.isRequired = true;
    f.type = 1U;
    f.name = "name";
    f.order = 0;
  }
  {
    ::apache::thrift::reflection::StructField& f = dt.fields[2];
    f.isRequired = false;
    f.type = 8040686326052690155U;
    f.name = "fields";
    f.order = 1;
  }
  {
    ::apache::thrift::reflection::StructField& f = dt.fields[3];
    f.isRequired = false;
    f.type = 6U;
    f.name = "mapKeyType";
    f.order = 2;
  }
  {
    ::apache::thrift::reflection::StructField& f = dt.fields[4];
    f.isRequired = false;
    f.type = 6U;
    f.name = "valueType";
    f.order = 3;
  }
  {
    ::apache::thrift::reflection::StructField& f = dt.fields[5];
    f.isRequired = false;
    f.type = 13380114062027473323U;
    f.name = "enumValues";
    f.order = 4;
  }
  reflectionInitializer_13380114062027473323(schema);  // map<string, i32>
  reflectionInitializer_8040686326052690155(schema);  // map<i16, struct reflection.StructField>
}

void  reflectionInitializer_4733295045172396908(::apache::thrift::reflection::Schema&);  // struct reflection.DataType
// Reflection initializer for map<i64, struct reflection.DataType>
void reflectionInitializer_1120695215068746603(::apache::thrift::reflection::Schema& schema) {
  const uint64_t id = 1120695215068746603U;
  if (schema.dataTypes.count(id)) return;
  ::apache::thrift::reflection::DataType& dt = schema.dataTypes[id];
  dt.name = "map<i64, struct reflection.DataType>";
  schema.names[dt.name] = id;
  dt.__isset.mapKeyType = true;
  dt.mapKeyType = 6U;
  dt.__isset.valueType = true;
  dt.valueType = 4733295045172396908U;
  reflectionInitializer_4733295045172396908(schema);  // struct reflection.DataType
}

// Reflection initializer for map<string, i64>
void reflectionInitializer_69795980560411019(::apache::thrift::reflection::Schema& schema) {
  const uint64_t id = 69795980560411019U;
  if (schema.dataTypes.count(id)) return;
  ::apache::thrift::reflection::DataType& dt = schema.dataTypes[id];
  dt.name = "map<string, i64>";
  schema.names[dt.name] = id;
  dt.__isset.mapKeyType = true;
  dt.mapKeyType = 1U;
  dt.__isset.valueType = true;
  dt.valueType = 6U;
}

void  reflectionInitializer_1120695215068746603(::apache::thrift::reflection::Schema&);  // map<i64, struct reflection.DataType>
void  reflectionInitializer_69795980560411019(::apache::thrift::reflection::Schema&);  // map<string, i64>
// Reflection initializer for struct reflection.Schema
void reflectionInitializer_6902704939566307148(::apache::thrift::reflection::Schema& schema) {
  const uint64_t id = 6902704939566307148U;
  if (schema.dataTypes.count(id)) return;
  ::apache::thrift::reflection::DataType& dt = schema.dataTypes[id];
  dt.name = "struct reflection.Schema";
  schema.names[dt.name] = id;
  dt.__isset.fields = true;
  {
    ::apache::thrift::reflection::StructField& f = dt.fields[1];
    f.isRequired = true;
    f.type = 1120695215068746603U;
    f.name = "dataTypes";
    f.order = 0;
  }
  {
    ::apache::thrift::reflection::StructField& f = dt.fields[2];
    f.isRequired = true;
    f.type = 69795980560411019U;
    f.name = "names";
    f.order = 1;
  }
  reflectionInitializer_1120695215068746603(schema);  // map<i64, struct reflection.DataType>
  reflectionInitializer_69795980560411019(schema);  // map<string, i64>
}

}}}} // namespace

