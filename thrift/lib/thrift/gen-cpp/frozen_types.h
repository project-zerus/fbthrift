/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef  _apache_thrift_frozen_schema_frozen_TYPES_H
#define  _apache_thrift_frozen_schema_frozen_TYPES_H

#include <thrift/lib/cpp/Thrift.h>
#include <thrift/lib/cpp/TApplicationException.h>
#include <thrift/lib/cpp/protocol/TProtocol.h>
#include <thrift/lib/cpp/transport/TTransport.h>

namespace apache { namespace thrift { namespace reflection {
class Schema;
}}}


namespace apache { namespace thrift { namespace frozen { namespace schema {

class Field;

class Layout;

class Schema;

void swap(Field &a, Field &b);

class Field : public apache::thrift::TStructType<Field> {
 public:

  static const uint64_t _reflection_id = 2361056240366028172U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  Field() : layoutId(0), offset(0) {
  }

  Field(const Field&) = default;
  Field& operator=(const Field& src)= default;
  Field(Field&&) = default;
  Field& operator=(Field&&) = default;

  void __clear();

  virtual ~Field() throw() {}

  int16_t layoutId;
  int16_t offset;

  struct __isset {
    __isset() { __clear(); } 
    void __clear() {
      layoutId = false;
      offset = false;
    }
    bool layoutId;
    bool offset;
  } __isset;

  bool operator == (const Field &) const;
  bool operator != (const Field& rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Field & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

class Field;
void merge(const Field& from, Field& to);
void merge(Field&& from, Field& to);
void swap(Layout &a, Layout &b);

class Layout : public apache::thrift::TStructType<Layout> {
 public:

  static const uint64_t _reflection_id = 3221448234020655692U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  Layout() : size(0), bits(0), typeName("") {
  }

  Layout(const Layout&) = default;
  Layout& operator=(const Layout& src)= default;
  Layout(Layout&&) = default;
  Layout& operator=(Layout&&) = default;

  void __clear();

  virtual ~Layout() throw() {}

  int32_t size;
  int16_t bits;
  std::map<int16_t, Field>  fields;
  std::string typeName;

  struct __isset {
    __isset() { __clear(); } 
    void __clear() {
      size = false;
      bits = false;
      fields = false;
      typeName = false;
    }
    bool size;
    bool bits;
    bool fields;
    bool typeName;
  } __isset;

  bool operator == (const Layout &) const;
  bool operator != (const Layout& rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Layout & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

class Layout;
void merge(const Layout& from, Layout& to);
void merge(Layout&& from, Layout& to);
void swap(Schema &a, Schema &b);

class Schema : public apache::thrift::TStructType<Schema> {
 public:

  static const uint64_t _reflection_id = 6060681111115730220U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  Schema() : fileVersion(0), relaxTypeChecks(false), rootLayout(0) {
  }

  Schema(const Schema&) = default;
  Schema& operator=(const Schema& src)= default;
  Schema(Schema&&) = default;
  Schema& operator=(Schema&&) = default;

  void __clear();

  virtual ~Schema() throw() {}

  int32_t fileVersion;
  bool relaxTypeChecks;
  std::map<int16_t, Layout>  layouts;
  int16_t rootLayout;

  struct __isset {
    __isset() { __clear(); } 
    void __clear() {
      fileVersion = false;
      relaxTypeChecks = false;
      layouts = false;
      rootLayout = false;
    }
    bool fileVersion;
    bool relaxTypeChecks;
    bool layouts;
    bool rootLayout;
  } __isset;

  bool operator == (const Schema &) const;
  bool operator != (const Schema& rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Schema & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

class Schema;
void merge(const Schema& from, Schema& to);
void merge(Schema&& from, Schema& to);
}}}} // namespace

#include "frozen_types.tcc"

#endif
