/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include <thrift/lib/cpp2/Thrift.h>
#include <thrift/lib/cpp2/protocol/Protocol.h>
#include <thrift/lib/cpp2/protocol/BinaryProtocol.h>
#include <thrift/lib/cpp2/protocol/CompactProtocol.h>
#include <thrift/lib/cpp2/protocol/DebugProtocol.h>
#include <thrift/lib/cpp2/protocol/VirtualProtocol.h>
#include <thrift/lib/cpp/protocol/TProtocol.h>
#include <thrift/lib/cpp/TApplicationException.h>
#include <folly/io/IOBuf.h>
#include <folly/io/Cursor.h>
#include <boost/operators.hpp>




namespace apache { namespace thrift { namespace sasl {

class SaslOutcome;
class SaslRequest;
class SaslReply;
class SaslStart;

class SaslOutcome : private boost::totally_ordered<SaslOutcome> {
 public:

  SaslOutcome() :
      success(0) {}
  // FragileConstructor for use in initialization lists only

  SaslOutcome(apache::thrift::FragileConstructor, bool success__arg, std::string additional_data__arg) :
      success(std::move(success__arg)),
      additional_data(std::move(additional_data__arg)) {}

  SaslOutcome(SaslOutcome&&) = default;

  SaslOutcome(const SaslOutcome&) = default;

  SaslOutcome& operator=(SaslOutcome&&) = default;

  SaslOutcome& operator=(const SaslOutcome&) = default;
  void __clear();

  virtual ~SaslOutcome() throw() {}

  bool success;
  std::string additional_data;

  struct __isset {
    __isset() {
      __clear();
    }

    void __clear() {
      success = false;
      additional_data = false;
    }

    bool success;
    bool additional_data;
  } __isset;
  bool operator==(const SaslOutcome& rhs) const;
  bool operator < (const SaslOutcome& rhs) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

void swap(SaslOutcome& a, SaslOutcome& b);

}}} // apache::thrift::sasl
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::apache::thrift::sasl::SaslOutcome>::clear( ::apache::thrift::sasl::SaslOutcome* obj) {
  return obj->__clear();
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::apache::thrift::sasl::SaslOutcome>::write(Protocol* proto, const  ::apache::thrift::sasl::SaslOutcome* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::apache::thrift::sasl::SaslOutcome>::read(Protocol* proto,   ::apache::thrift::sasl::SaslOutcome* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::apache::thrift::sasl::SaslOutcome>::serializedSize(Protocol* proto, const  ::apache::thrift::sasl::SaslOutcome* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::apache::thrift::sasl::SaslOutcome>::serializedSizeZC(Protocol* proto, const  ::apache::thrift::sasl::SaslOutcome* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace apache { namespace thrift { namespace sasl {

class SaslRequest : private boost::totally_ordered<SaslRequest> {
 public:

  SaslRequest() :
      abort(0) {}
  // FragileConstructor for use in initialization lists only

  SaslRequest(apache::thrift::FragileConstructor, std::string response__arg, bool abort__arg) :
      response(std::move(response__arg)),
      abort(std::move(abort__arg)) {}

  SaslRequest(SaslRequest&&) = default;

  SaslRequest(const SaslRequest&) = default;

  SaslRequest& operator=(SaslRequest&&) = default;

  SaslRequest& operator=(const SaslRequest&) = default;
  void __clear();

  virtual ~SaslRequest() throw() {}

  std::string response;
  bool abort;

  struct __isset {
    __isset() {
      __clear();
    }

    void __clear() {
      response = false;
      abort = false;
    }

    bool response;
    bool abort;
  } __isset;
  bool operator==(const SaslRequest& rhs) const;
  bool operator < (const SaslRequest& rhs) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

void swap(SaslRequest& a, SaslRequest& b);

}}} // apache::thrift::sasl
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::apache::thrift::sasl::SaslRequest>::clear( ::apache::thrift::sasl::SaslRequest* obj) {
  return obj->__clear();
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::apache::thrift::sasl::SaslRequest>::write(Protocol* proto, const  ::apache::thrift::sasl::SaslRequest* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::apache::thrift::sasl::SaslRequest>::read(Protocol* proto,   ::apache::thrift::sasl::SaslRequest* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::apache::thrift::sasl::SaslRequest>::serializedSize(Protocol* proto, const  ::apache::thrift::sasl::SaslRequest* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::apache::thrift::sasl::SaslRequest>::serializedSizeZC(Protocol* proto, const  ::apache::thrift::sasl::SaslRequest* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace apache { namespace thrift { namespace sasl {

class SaslReply : private boost::totally_ordered<SaslReply> {
 public:

  SaslReply() {}
  // FragileConstructor for use in initialization lists only

  SaslReply(apache::thrift::FragileConstructor, std::string challenge__arg,  ::apache::thrift::sasl::SaslOutcome outcome__arg) :
      challenge(std::move(challenge__arg)),
      outcome(std::move(outcome__arg)) {}

  SaslReply(SaslReply&&) = default;

  SaslReply(const SaslReply&) = default;

  SaslReply& operator=(SaslReply&&) = default;

  SaslReply& operator=(const SaslReply&) = default;
  void __clear();

  virtual ~SaslReply() throw() {}

  std::string challenge;
   ::apache::thrift::sasl::SaslOutcome outcome;

  struct __isset {
    __isset() {
      __clear();
    }

    void __clear() {
      challenge = false;
      outcome = false;
    }

    bool challenge;
    bool outcome;
  } __isset;
  bool operator==(const SaslReply& rhs) const;
  bool operator < (const SaslReply& rhs) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

void swap(SaslReply& a, SaslReply& b);

}}} // apache::thrift::sasl
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::apache::thrift::sasl::SaslReply>::clear( ::apache::thrift::sasl::SaslReply* obj) {
  return obj->__clear();
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::apache::thrift::sasl::SaslReply>::write(Protocol* proto, const  ::apache::thrift::sasl::SaslReply* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::apache::thrift::sasl::SaslReply>::read(Protocol* proto,   ::apache::thrift::sasl::SaslReply* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::apache::thrift::sasl::SaslReply>::serializedSize(Protocol* proto, const  ::apache::thrift::sasl::SaslReply* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::apache::thrift::sasl::SaslReply>::serializedSizeZC(Protocol* proto, const  ::apache::thrift::sasl::SaslReply* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace apache { namespace thrift { namespace sasl {

class SaslStart : private boost::totally_ordered<SaslStart> {
 public:

  SaslStart() {}
  // FragileConstructor for use in initialization lists only

  SaslStart(apache::thrift::FragileConstructor, std::string mechanism__arg,  ::apache::thrift::sasl::SaslRequest request__arg) :
      mechanism(std::move(mechanism__arg)),
      request(std::move(request__arg)) {}

  SaslStart(SaslStart&&) = default;

  SaslStart(const SaslStart&) = default;

  SaslStart& operator=(SaslStart&&) = default;

  SaslStart& operator=(const SaslStart&) = default;
  void __clear();

  virtual ~SaslStart() throw() {}

  std::string mechanism;
   ::apache::thrift::sasl::SaslRequest request;

  struct __isset {
    __isset() {
      __clear();
    }

    void __clear() {
      mechanism = false;
      request = false;
    }

    bool mechanism;
    bool request;
  } __isset;
  bool operator==(const SaslStart& rhs) const;
  bool operator < (const SaslStart& rhs) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

void swap(SaslStart& a, SaslStart& b);

}}} // apache::thrift::sasl
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::apache::thrift::sasl::SaslStart>::clear( ::apache::thrift::sasl::SaslStart* obj) {
  return obj->__clear();
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::apache::thrift::sasl::SaslStart>::write(Protocol* proto, const  ::apache::thrift::sasl::SaslStart* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::apache::thrift::sasl::SaslStart>::read(Protocol* proto,   ::apache::thrift::sasl::SaslStart* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::apache::thrift::sasl::SaslStart>::serializedSize(Protocol* proto, const  ::apache::thrift::sasl::SaslStart* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::apache::thrift::sasl::SaslStart>::serializedSizeZC(Protocol* proto, const  ::apache::thrift::sasl::SaslStart* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace apache { namespace thrift { namespace sasl {

}}} // apache::thrift::sasl