/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "SaslAuthService.h"

#include "SaslAuthService.tcc"

namespace apache { namespace thrift { namespace sasl {

std::unique_ptr<apache::thrift::AsyncProcessor> SaslAuthServiceSvIf::getProcessor() {
  return std::unique_ptr<apache::thrift::AsyncProcessor>(new SaslAuthServiceAsyncProcessor((SaslAuthServiceSvIf*)this));
}

apache::thrift::concurrency::PriorityThreadManager::PRIORITY SaslAuthServiceSvIf::getprio_authFirstRequest(apache::thrift::Cpp2RequestContext* reqCtx) {
  apache::thrift::concurrency::PRIORITY prio0 = reqCtx->getCallPriority();
  if (prio0 != apache::thrift::concurrency::N_PRIORITIES) {
    return prio0;
  }
  return apache::thrift::concurrency::NORMAL;
}

void SaslAuthServiceSvIf::authFirstRequest( ::apache::thrift::sasl::SaslReply& _return, std::unique_ptr< ::apache::thrift::sasl::SaslStart> saslStart) {
  throw apache::thrift::TApplicationException("Function authFirstRequest is unimplemented");
}

void SaslAuthServiceSvIf::async_tm_authFirstRequest(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::apache::thrift::sasl::SaslReply>>> callback, std::unique_ptr< ::apache::thrift::sasl::SaslStart> saslStart) {
  auto callbackp = callback.release();
  if (!callbackp->isRequestActive()) {
    callbackp->deleteInThread();
    return;
  }
  setConnectionContext(callbackp->getConnectionContext());
  try {
    std::unique_ptr< ::apache::thrift::sasl::SaslReply> _return(new  ::apache::thrift::sasl::SaslReply);
    authFirstRequest(*_return, std::move(saslStart));
    callbackp->resultInThread(std::move(_return));
  } catch(const std::exception& ex) {
    callbackp->exceptionInThread(std::current_exception());
  }
  setConnectionContext(nullptr);
}

apache::thrift::concurrency::PriorityThreadManager::PRIORITY SaslAuthServiceSvIf::getprio_authNextRequest(apache::thrift::Cpp2RequestContext* reqCtx) {
  apache::thrift::concurrency::PRIORITY prio1 = reqCtx->getCallPriority();
  if (prio1 != apache::thrift::concurrency::N_PRIORITIES) {
    return prio1;
  }
  return apache::thrift::concurrency::NORMAL;
}

void SaslAuthServiceSvIf::authNextRequest( ::apache::thrift::sasl::SaslReply& _return, std::unique_ptr< ::apache::thrift::sasl::SaslRequest> saslRequest) {
  throw apache::thrift::TApplicationException("Function authNextRequest is unimplemented");
}

void SaslAuthServiceSvIf::async_tm_authNextRequest(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::apache::thrift::sasl::SaslReply>>> callback, std::unique_ptr< ::apache::thrift::sasl::SaslRequest> saslRequest) {
  auto callbackp = callback.release();
  if (!callbackp->isRequestActive()) {
    callbackp->deleteInThread();
    return;
  }
  setConnectionContext(callbackp->getConnectionContext());
  try {
    std::unique_ptr< ::apache::thrift::sasl::SaslReply> _return(new  ::apache::thrift::sasl::SaslReply);
    authNextRequest(*_return, std::move(saslRequest));
    callbackp->resultInThread(std::move(_return));
  } catch(const std::exception& ex) {
    callbackp->exceptionInThread(std::current_exception());
  }
  setConnectionContext(nullptr);
}

void SaslAuthServiceSvNull::authFirstRequest( ::apache::thrift::sasl::SaslReply& _return, std::unique_ptr< ::apache::thrift::sasl::SaslStart> saslStart) {}

void SaslAuthServiceSvNull::authNextRequest( ::apache::thrift::sasl::SaslReply& _return, std::unique_ptr< ::apache::thrift::sasl::SaslRequest> saslRequest) {}

std::string SaslAuthServiceAsyncProcessor::getServiceName() {
  return "SaslAuthService";
}

void SaslAuthServiceAsyncProcessor::process(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, apache::thrift::protocol::PROTOCOL_TYPES protType,apache::thrift::Cpp2RequestContext* context,apache::thrift::async::TEventBase* eb, apache::thrift::concurrency::ThreadManager* tm) {
  std::string fname;
  apache::thrift::MessageType mtype;
  int32_t protoSeqId = 0;
  switch(protType) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      std::unique_ptr<apache::thrift::BinaryProtocolReader> iprot(new apache::thrift::BinaryProtocolReader());
      iprot->setInput(buf.get());
      try {
        iprot->readMessageBegin(fname, mtype, protoSeqId);
      } catch(const apache::thrift::TException& ex) {
        LOG(ERROR) << "received invalid message from client: " << ex.what();
        apache::thrift::BinaryProtocolWriter prot;
        if (req) {
          LOG(ERROR) << "invalid message from client" << " in function process";
          apache::thrift::TApplicationException x("invalid message from client");
          folly::IOBufQueue queue = serializeException("process", &prot, protoSeqId, nullptr, x);
          queue.append(apache::thrift::transport::THeader::transform(queue.move(), context->getTransforms(), context->getMinCompressBytes()));
          auto queue_mw = folly::makeMoveWrapper(std::move(queue));
          auto req_mw = folly::makeMoveWrapper(std::move(req));
          eb->runInEventBaseThread([=]() mutable {
            (*req_mw)->sendReply(queue_mw->move());
          }
          );
          return;
        }
        else {
          LOG(ERROR) << "invalid message from client" << " in oneway function process";
        }
        return;
      }
      if (mtype != apache::thrift::T_CALL && mtype != apache::thrift::T_ONEWAY) {
        LOG(ERROR) << "received invalid message of type " << mtype;
        apache::thrift::BinaryProtocolWriter prot;
        if (req) {
          LOG(ERROR) << "invalid message arguments" << " in function process";
          apache::thrift::TApplicationException x("invalid message arguments");
          folly::IOBufQueue queue = serializeException("process", &prot, protoSeqId, nullptr, x);
          queue.append(apache::thrift::transport::THeader::transform(queue.move(), context->getTransforms(), context->getMinCompressBytes()));
          auto queue_mw = folly::makeMoveWrapper(std::move(queue));
          auto req_mw = folly::makeMoveWrapper(std::move(req));
          eb->runInEventBaseThread([=]() mutable {
            (*req_mw)->sendReply(queue_mw->move());
          }
          );
          return;
        }
        else {
          LOG(ERROR) << "invalid message arguments" << " in oneway function process";
        }
      }
      auto pfn = binaryProcessMap_.find(fname);
      if (pfn == binaryProcessMap_.end()) {
        const std::string exMsg = folly::stringPrintf( "Method name %s not found", fname.c_str());
        apache::thrift::BinaryProtocolWriter prot;
        if (req) {
          LOG(ERROR) << exMsg << " in function process";
          apache::thrift::TApplicationException x(exMsg);
          folly::IOBufQueue queue = serializeException("process", &prot, protoSeqId, nullptr, x);
          queue.append(apache::thrift::transport::THeader::transform(queue.move(), context->getTransforms(), context->getMinCompressBytes()));
          auto queue_mw = folly::makeMoveWrapper(std::move(queue));
          auto req_mw = folly::makeMoveWrapper(std::move(req));
          eb->runInEventBaseThread([=]() mutable {
            (*req_mw)->sendReply(queue_mw->move());
          }
          );
          return;
        }
        else {
          LOG(ERROR) << exMsg << " in oneway function process";
        }
        return;
      }
      (this->*(pfn->second))(std::move(req), std::move(buf), std::move(iprot), context, eb, tm);
      return;
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      std::unique_ptr<apache::thrift::CompactProtocolReader> iprot(new apache::thrift::CompactProtocolReader());
      iprot->setInput(buf.get());
      try {
        iprot->readMessageBegin(fname, mtype, protoSeqId);
      } catch(const apache::thrift::TException& ex) {
        LOG(ERROR) << "received invalid message from client: " << ex.what();
        apache::thrift::CompactProtocolWriter prot;
        if (req) {
          LOG(ERROR) << "invalid message from client" << " in function process";
          apache::thrift::TApplicationException x("invalid message from client");
          folly::IOBufQueue queue = serializeException("process", &prot, protoSeqId, nullptr, x);
          queue.append(apache::thrift::transport::THeader::transform(queue.move(), context->getTransforms(), context->getMinCompressBytes()));
          auto queue_mw = folly::makeMoveWrapper(std::move(queue));
          auto req_mw = folly::makeMoveWrapper(std::move(req));
          eb->runInEventBaseThread([=]() mutable {
            (*req_mw)->sendReply(queue_mw->move());
          }
          );
          return;
        }
        else {
          LOG(ERROR) << "invalid message from client" << " in oneway function process";
        }
        return;
      }
      if (mtype != apache::thrift::T_CALL && mtype != apache::thrift::T_ONEWAY) {
        LOG(ERROR) << "received invalid message of type " << mtype;
        apache::thrift::CompactProtocolWriter prot;
        if (req) {
          LOG(ERROR) << "invalid message arguments" << " in function process";
          apache::thrift::TApplicationException x("invalid message arguments");
          folly::IOBufQueue queue = serializeException("process", &prot, protoSeqId, nullptr, x);
          queue.append(apache::thrift::transport::THeader::transform(queue.move(), context->getTransforms(), context->getMinCompressBytes()));
          auto queue_mw = folly::makeMoveWrapper(std::move(queue));
          auto req_mw = folly::makeMoveWrapper(std::move(req));
          eb->runInEventBaseThread([=]() mutable {
            (*req_mw)->sendReply(queue_mw->move());
          }
          );
          return;
        }
        else {
          LOG(ERROR) << "invalid message arguments" << " in oneway function process";
        }
      }
      auto pfn = compactProcessMap_.find(fname);
      if (pfn == compactProcessMap_.end()) {
        const std::string exMsg = folly::stringPrintf( "Method name %s not found", fname.c_str());
        apache::thrift::CompactProtocolWriter prot;
        if (req) {
          LOG(ERROR) << exMsg << " in function process";
          apache::thrift::TApplicationException x(exMsg);
          folly::IOBufQueue queue = serializeException("process", &prot, protoSeqId, nullptr, x);
          queue.append(apache::thrift::transport::THeader::transform(queue.move(), context->getTransforms(), context->getMinCompressBytes()));
          auto queue_mw = folly::makeMoveWrapper(std::move(queue));
          auto req_mw = folly::makeMoveWrapper(std::move(req));
          eb->runInEventBaseThread([=]() mutable {
            (*req_mw)->sendReply(queue_mw->move());
          }
          );
          return;
        }
        else {
          LOG(ERROR) << exMsg << " in oneway function process";
        }
        return;
      }
      (this->*(pfn->second))(std::move(req), std::move(buf), std::move(iprot), context, eb, tm);
      return;
    }
    default:
    {
      LOG(ERROR) << "invalid protType: " << protType;
      return;
      break;
    }
  }
}

bool SaslAuthServiceAsyncProcessor::isOnewayMethod(const folly::IOBuf* buf, const apache::thrift::transport::THeader* header) {
  std::string fname;
  apache::thrift::MessageType mtype;
  int32_t protoSeqId = 0;
  apache::thrift::protocol::PROTOCOL_TYPES protType = static_cast<apache::thrift::protocol::PROTOCOL_TYPES>(header->getProtocolId());
  switch(protType) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolReader iprot;
      iprot.setInput(buf);
      try {
        iprot.readMessageBegin(fname, mtype, protoSeqId);
        auto it = onewayMethods.find(fname);
        return it != onewayMethods.end();
      } catch(const apache::thrift::TException& ex) {
        LOG(ERROR) << "received invalid message from client: " << ex.what();
        return false;
      }
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolReader iprot;
      iprot.setInput(buf);
      try {
        iprot.readMessageBegin(fname, mtype, protoSeqId);
        auto it = onewayMethods.find(fname);
        return it != onewayMethods.end();
      } catch(const apache::thrift::TException& ex) {
        LOG(ERROR) << "received invalid message from client: " << ex.what();
        return false;
      }
    }
    default:
    {
      LOG(ERROR) << "invalid protType: " << protType;
      break;
    }
  }
  return false;
}

std::unordered_set<std::string> SaslAuthServiceAsyncProcessor::onewayMethods {};
SaslAuthServiceAsyncProcessor::binaryProcessMap SaslAuthServiceAsyncProcessor::binaryProcessMap_ {
  {"authFirstRequest", &SaslAuthServiceAsyncProcessor::_processInThread_authFirstRequest<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"authNextRequest", &SaslAuthServiceAsyncProcessor::_processInThread_authNextRequest<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>}
};
SaslAuthServiceAsyncProcessor::compactProcessMap SaslAuthServiceAsyncProcessor::compactProcessMap_ {
  {"authFirstRequest", &SaslAuthServiceAsyncProcessor::_processInThread_authFirstRequest<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"authNextRequest", &SaslAuthServiceAsyncProcessor::_processInThread_authNextRequest<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>}
};

std::string SaslAuthServiceAsyncClient::getServiceName() {
  return "SaslAuthService";
}

void SaslAuthServiceAsyncClient::authFirstRequest(std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::apache::thrift::sasl::SaslStart& saslStart) {
  authFirstRequest(::apache::thrift::RpcOptions(), std::move(callback), saslStart);
}

void SaslAuthServiceAsyncClient::callback_authFirstRequest(std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::apache::thrift::sasl::SaslStart& saslStart) {
  authFirstRequest(::apache::thrift::RpcOptions(), std::move(callback), saslStart);
}

void SaslAuthServiceAsyncClient::authFirstRequest(const apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::apache::thrift::sasl::SaslStart& saslStart) {
  switch(getChannel()->getProtocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolWriter writer;
      authFirstRequestT(&writer, rpcOptions, std::move(callback), saslStart);
      break;
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolWriter writer;
      authFirstRequestT(&writer, rpcOptions, std::move(callback), saslStart);
      break;
    }
    default:
    {
      throw apache::thrift::TApplicationException("Could not find Protocol");
    }
  }
}

void SaslAuthServiceAsyncClient::sync_authFirstRequest( ::apache::thrift::sasl::SaslReply& _return, const  ::apache::thrift::sasl::SaslStart& saslStart) {
  sync_authFirstRequest(::apache::thrift::RpcOptions(), _return, saslStart);
}

void SaslAuthServiceAsyncClient::sync_authFirstRequest(const apache::thrift::RpcOptions& rpcOptions,  ::apache::thrift::sasl::SaslReply& _return, const  ::apache::thrift::sasl::SaslStart& saslStart) {
  apache::thrift::ClientReceiveState _returnState;
  std::unique_ptr<apache::thrift::RequestCallback> callback2(new apache::thrift::ClientSyncCallback(&_returnState, getChannel()->getEventBase(), false));
  authFirstRequest(rpcOptions, std::move(callback2), saslStart);
  getChannel()->getEventBase()->loopForever();
  if (!_returnState.buf()) {
    assert(_returnState.exception());
    std::rethrow_exception(_returnState.exception());
  }
  recv_authFirstRequest(_return, _returnState);
}

void SaslAuthServiceAsyncClient::authFirstRequest(std::function<void (::apache::thrift::ClientReceiveState&&)> callback, const  ::apache::thrift::sasl::SaslStart& saslStart) {
  authFirstRequest(std::unique_ptr<apache::thrift::RequestCallback>(new apache::thrift::FunctionReplyCallback(std::move(callback))),saslStart);
}

void SaslAuthServiceAsyncClient::functor_authFirstRequest(std::function<void (::apache::thrift::ClientReceiveState&&)> callback, const  ::apache::thrift::sasl::SaslStart& saslStart) {
  authFirstRequest(std::unique_ptr<apache::thrift::RequestCallback>(new apache::thrift::FunctionReplyCallback(std::move(callback))),saslStart);
}

folly::wangle::Future< ::apache::thrift::sasl::SaslReply> SaslAuthServiceAsyncClient::future_authFirstRequest(const  ::apache::thrift::sasl::SaslStart& saslStart) {
  return future_authFirstRequest(::apache::thrift::RpcOptions(), saslStart);
}

folly::wangle::Future< ::apache::thrift::sasl::SaslReply> SaslAuthServiceAsyncClient::future_authFirstRequest(const apache::thrift::RpcOptions& rpcOptions, const  ::apache::thrift::sasl::SaslStart& saslStart) {
  folly::wangle::Promise< ::apache::thrift::sasl::SaslReply> promise3;
  auto future4 = promise3.getFuture();
  std::unique_ptr<apache::thrift::RequestCallback> callback5(new apache::thrift::FutureCallback< ::apache::thrift::sasl::SaslReply>(std::move(promise3), recv_authFirstRequest));
  authFirstRequest(rpcOptions, std::move(callback5), saslStart);
  return std::move(future4);
}

folly::exception_wrapper SaslAuthServiceAsyncClient::recv_wrapped_authFirstRequest( ::apache::thrift::sasl::SaslReply& _return, ::apache::thrift::ClientReceiveState& state) {
  auto ew = state.exceptionWrapper();
  if (ew) {
    return ew;
  }
  if (!state.buf()) {
    return folly::make_exception_wrapper<apache::thrift::TApplicationException>("recv_ called without result");
  }
  switch(state.protocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolReader reader;
      return recv_wrapped_authFirstRequestT(&reader, _return, state);
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolReader reader;
      return recv_wrapped_authFirstRequestT(&reader, _return, state);
    }
    default:
    {
    }
  }
  return folly::make_exception_wrapper<apache::thrift::TApplicationException>("Could not find Protocol");
}

void SaslAuthServiceAsyncClient::recv_authFirstRequest( ::apache::thrift::sasl::SaslReply& _return, ::apache::thrift::ClientReceiveState& state) {
  auto ew = recv_wrapped_authFirstRequest(_return, state);
  if (ew) {
    ew.throwException();
  }
}

void SaslAuthServiceAsyncClient::recv_instance_authFirstRequest( ::apache::thrift::sasl::SaslReply& _return, ::apache::thrift::ClientReceiveState& state) {
  return recv_authFirstRequest(_return, state);
}

folly::exception_wrapper SaslAuthServiceAsyncClient::recv_instance_wrapped_authFirstRequest( ::apache::thrift::sasl::SaslReply& _return, ::apache::thrift::ClientReceiveState& state) {
  return recv_wrapped_authFirstRequest(_return, state);
}

void SaslAuthServiceAsyncClient::authNextRequest(std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::apache::thrift::sasl::SaslRequest& saslRequest) {
  authNextRequest(::apache::thrift::RpcOptions(), std::move(callback), saslRequest);
}

void SaslAuthServiceAsyncClient::callback_authNextRequest(std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::apache::thrift::sasl::SaslRequest& saslRequest) {
  authNextRequest(::apache::thrift::RpcOptions(), std::move(callback), saslRequest);
}

void SaslAuthServiceAsyncClient::authNextRequest(const apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::apache::thrift::sasl::SaslRequest& saslRequest) {
  switch(getChannel()->getProtocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolWriter writer;
      authNextRequestT(&writer, rpcOptions, std::move(callback), saslRequest);
      break;
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolWriter writer;
      authNextRequestT(&writer, rpcOptions, std::move(callback), saslRequest);
      break;
    }
    default:
    {
      throw apache::thrift::TApplicationException("Could not find Protocol");
    }
  }
}

void SaslAuthServiceAsyncClient::sync_authNextRequest( ::apache::thrift::sasl::SaslReply& _return, const  ::apache::thrift::sasl::SaslRequest& saslRequest) {
  sync_authNextRequest(::apache::thrift::RpcOptions(), _return, saslRequest);
}

void SaslAuthServiceAsyncClient::sync_authNextRequest(const apache::thrift::RpcOptions& rpcOptions,  ::apache::thrift::sasl::SaslReply& _return, const  ::apache::thrift::sasl::SaslRequest& saslRequest) {
  apache::thrift::ClientReceiveState _returnState;
  std::unique_ptr<apache::thrift::RequestCallback> callback7(new apache::thrift::ClientSyncCallback(&_returnState, getChannel()->getEventBase(), false));
  authNextRequest(rpcOptions, std::move(callback7), saslRequest);
  getChannel()->getEventBase()->loopForever();
  if (!_returnState.buf()) {
    assert(_returnState.exception());
    std::rethrow_exception(_returnState.exception());
  }
  recv_authNextRequest(_return, _returnState);
}

void SaslAuthServiceAsyncClient::authNextRequest(std::function<void (::apache::thrift::ClientReceiveState&&)> callback, const  ::apache::thrift::sasl::SaslRequest& saslRequest) {
  authNextRequest(std::unique_ptr<apache::thrift::RequestCallback>(new apache::thrift::FunctionReplyCallback(std::move(callback))),saslRequest);
}

void SaslAuthServiceAsyncClient::functor_authNextRequest(std::function<void (::apache::thrift::ClientReceiveState&&)> callback, const  ::apache::thrift::sasl::SaslRequest& saslRequest) {
  authNextRequest(std::unique_ptr<apache::thrift::RequestCallback>(new apache::thrift::FunctionReplyCallback(std::move(callback))),saslRequest);
}

folly::wangle::Future< ::apache::thrift::sasl::SaslReply> SaslAuthServiceAsyncClient::future_authNextRequest(const  ::apache::thrift::sasl::SaslRequest& saslRequest) {
  return future_authNextRequest(::apache::thrift::RpcOptions(), saslRequest);
}

folly::wangle::Future< ::apache::thrift::sasl::SaslReply> SaslAuthServiceAsyncClient::future_authNextRequest(const apache::thrift::RpcOptions& rpcOptions, const  ::apache::thrift::sasl::SaslRequest& saslRequest) {
  folly::wangle::Promise< ::apache::thrift::sasl::SaslReply> promise8;
  auto future9 = promise8.getFuture();
  std::unique_ptr<apache::thrift::RequestCallback> callback10(new apache::thrift::FutureCallback< ::apache::thrift::sasl::SaslReply>(std::move(promise8), recv_authNextRequest));
  authNextRequest(rpcOptions, std::move(callback10), saslRequest);
  return std::move(future9);
}

folly::exception_wrapper SaslAuthServiceAsyncClient::recv_wrapped_authNextRequest( ::apache::thrift::sasl::SaslReply& _return, ::apache::thrift::ClientReceiveState& state) {
  auto ew = state.exceptionWrapper();
  if (ew) {
    return ew;
  }
  if (!state.buf()) {
    return folly::make_exception_wrapper<apache::thrift::TApplicationException>("recv_ called without result");
  }
  switch(state.protocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolReader reader;
      return recv_wrapped_authNextRequestT(&reader, _return, state);
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolReader reader;
      return recv_wrapped_authNextRequestT(&reader, _return, state);
    }
    default:
    {
    }
  }
  return folly::make_exception_wrapper<apache::thrift::TApplicationException>("Could not find Protocol");
}

void SaslAuthServiceAsyncClient::recv_authNextRequest( ::apache::thrift::sasl::SaslReply& _return, ::apache::thrift::ClientReceiveState& state) {
  auto ew = recv_wrapped_authNextRequest(_return, state);
  if (ew) {
    ew.throwException();
  }
}

void SaslAuthServiceAsyncClient::recv_instance_authNextRequest( ::apache::thrift::sasl::SaslReply& _return, ::apache::thrift::ClientReceiveState& state) {
  return recv_authNextRequest(_return, state);
}

folly::exception_wrapper SaslAuthServiceAsyncClient::recv_instance_wrapped_authNextRequest( ::apache::thrift::sasl::SaslReply& _return, ::apache::thrift::ClientReceiveState& state) {
  return recv_wrapped_authNextRequest(_return, state);
}

template uint32_t SaslAuthService_authFirstRequest_args::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t SaslAuthService_authFirstRequest_args::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t SaslAuthService_authFirstRequest_args::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t SaslAuthService_authFirstRequest_args::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t SaslAuthService_authFirstRequest_args::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t SaslAuthService_authFirstRequest_args::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t SaslAuthService_authFirstRequest_args::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t SaslAuthService_authFirstRequest_args::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t SaslAuthService_authFirstRequest_args::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t SaslAuthService_authFirstRequest_args::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

void SaslAuthService_authFirstRequest_args::__clear() {
  ::apache::thrift::Cpp2Ops<  ::apache::thrift::sasl::SaslStart>::clear(&saslStart);
  __isset.__clear();
}

bool SaslAuthService_authFirstRequest_args::operator==(const SaslAuthService_authFirstRequest_args& rhs) const {
  if (!((saslStart == rhs.saslStart))) {
    return false;
  }
  return true;
}

template uint32_t SaslAuthService_authFirstRequest_pargs::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t SaslAuthService_authFirstRequest_pargs::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t SaslAuthService_authFirstRequest_pargs::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t SaslAuthService_authFirstRequest_pargs::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t SaslAuthService_authFirstRequest_pargs::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t SaslAuthService_authFirstRequest_pargs::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t SaslAuthService_authFirstRequest_pargs::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t SaslAuthService_authFirstRequest_pargs::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t SaslAuthService_authFirstRequest_pargs::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t SaslAuthService_authFirstRequest_pargs::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

template uint32_t SaslAuthService_authFirstRequest_presult::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t SaslAuthService_authFirstRequest_presult::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t SaslAuthService_authFirstRequest_presult::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t SaslAuthService_authFirstRequest_presult::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t SaslAuthService_authFirstRequest_presult::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t SaslAuthService_authFirstRequest_presult::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t SaslAuthService_authFirstRequest_presult::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t SaslAuthService_authFirstRequest_presult::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t SaslAuthService_authFirstRequest_presult::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t SaslAuthService_authFirstRequest_presult::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

template uint32_t SaslAuthService_authFirstRequest_result::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t SaslAuthService_authFirstRequest_result::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t SaslAuthService_authFirstRequest_result::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t SaslAuthService_authFirstRequest_result::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t SaslAuthService_authFirstRequest_result::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t SaslAuthService_authFirstRequest_result::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t SaslAuthService_authFirstRequest_result::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t SaslAuthService_authFirstRequest_result::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t SaslAuthService_authFirstRequest_result::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t SaslAuthService_authFirstRequest_result::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

void SaslAuthService_authFirstRequest_result::__clear() {
  ::apache::thrift::Cpp2Ops<  ::apache::thrift::sasl::SaslReply>::clear(&success);
  __isset.__clear();
}

bool SaslAuthService_authFirstRequest_result::operator==(const SaslAuthService_authFirstRequest_result& rhs) const {
  if (!((success == rhs.success))) {
    return false;
  }
  return true;
}

template uint32_t SaslAuthService_authNextRequest_args::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t SaslAuthService_authNextRequest_args::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t SaslAuthService_authNextRequest_args::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t SaslAuthService_authNextRequest_args::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t SaslAuthService_authNextRequest_args::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t SaslAuthService_authNextRequest_args::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t SaslAuthService_authNextRequest_args::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t SaslAuthService_authNextRequest_args::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t SaslAuthService_authNextRequest_args::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t SaslAuthService_authNextRequest_args::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

void SaslAuthService_authNextRequest_args::__clear() {
  ::apache::thrift::Cpp2Ops<  ::apache::thrift::sasl::SaslRequest>::clear(&saslRequest);
  __isset.__clear();
}

bool SaslAuthService_authNextRequest_args::operator==(const SaslAuthService_authNextRequest_args& rhs) const {
  if (!((saslRequest == rhs.saslRequest))) {
    return false;
  }
  return true;
}

template uint32_t SaslAuthService_authNextRequest_pargs::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t SaslAuthService_authNextRequest_pargs::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t SaslAuthService_authNextRequest_pargs::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t SaslAuthService_authNextRequest_pargs::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t SaslAuthService_authNextRequest_pargs::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t SaslAuthService_authNextRequest_pargs::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t SaslAuthService_authNextRequest_pargs::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t SaslAuthService_authNextRequest_pargs::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t SaslAuthService_authNextRequest_pargs::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t SaslAuthService_authNextRequest_pargs::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

template uint32_t SaslAuthService_authNextRequest_presult::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t SaslAuthService_authNextRequest_presult::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t SaslAuthService_authNextRequest_presult::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t SaslAuthService_authNextRequest_presult::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t SaslAuthService_authNextRequest_presult::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t SaslAuthService_authNextRequest_presult::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t SaslAuthService_authNextRequest_presult::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t SaslAuthService_authNextRequest_presult::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t SaslAuthService_authNextRequest_presult::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t SaslAuthService_authNextRequest_presult::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

template uint32_t SaslAuthService_authNextRequest_result::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t SaslAuthService_authNextRequest_result::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t SaslAuthService_authNextRequest_result::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t SaslAuthService_authNextRequest_result::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t SaslAuthService_authNextRequest_result::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t SaslAuthService_authNextRequest_result::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t SaslAuthService_authNextRequest_result::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t SaslAuthService_authNextRequest_result::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t SaslAuthService_authNextRequest_result::write<apache::thrift::DebugProtocolWriter>(apache::thrift::DebugProtocolWriter*) const;
template uint32_t SaslAuthService_authNextRequest_result::read<apache::thrift::VirtualReaderBase>(apache::thrift::VirtualReaderBase*);

void SaslAuthService_authNextRequest_result::__clear() {
  ::apache::thrift::Cpp2Ops<  ::apache::thrift::sasl::SaslReply>::clear(&success);
  __isset.__clear();
}

bool SaslAuthService_authNextRequest_result::operator==(const SaslAuthService_authNextRequest_result& rhs) const {
  if (!((success == rhs.success))) {
    return false;
  }
  return true;
}

}}} // apache::thrift::sasl
namespace apache { namespace thrift {

}} // apache::thrift